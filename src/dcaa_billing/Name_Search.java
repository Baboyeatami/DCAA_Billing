/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dcaa_billing;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jamie Eduardo Rosal <Jamiewertalmighty@gmail.com>
 */
public class Name_Search extends javax.swing.JFrame {

    DefaultTableModel model;
    Invoice main;
    JMenuItem Select = new JMenuItem("Select");
    JPopupMenu menu = new JPopupMenu();
    Name_Search maincc;
    Statements paymentHistory;
    Subsidy_List subsidy_List;
    Add_Subsidy_Student add_Subsidy_Student;
    Batch_Payment BatchPayemnt_Main;
    Add_Batch_to_BatchPayemnt add_Batch_to_BatchPayemnt;
    boolean StatementsMode = false;
    boolean subsidyMode = false;
    boolean BatchPayment = false;
    String SY_id;

    /**
     * Creates new form Name_Search
     */
    public Name_Search() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        maincc = this;
        Select.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (StatementsMode) {
                    paymentHistory.set_id(model.getValueAt(jTable1.getSelectedRow(), 0).toString());
                    maincc.dispose();
                } else if (subsidyMode) {

                    if (add_Subsidy_Student == null) {
                        add_Subsidy_Student = new Add_Subsidy_Student();

                        add_Subsidy_Student.loadStudent(model.getValueAt(jTable1.getSelectedRow(), 0).toString(), model.getValueAt(jTable1.getSelectedRow(), 1).toString());
                        add_Subsidy_Student.setVisible(true);
                        maincc.dispose();
                        System.out.println(subsidyMode + "Subsidy Mode");
                    } else {

                        add_Subsidy_Student.loadStudent(model.getValueAt(jTable1.getSelectedRow(), 0).toString(), model.getValueAt(jTable1.getSelectedRow(), 1).toString());
                        add_Subsidy_Student.setVisible(true);
                        maincc.dispose();
                        System.out.println(subsidyMode + "Subsidy Mode");

                    }

                } else if (BatchPayment) {
                    if (add_Batch_to_BatchPayemnt == null) {
                        add_Batch_to_BatchPayemnt = new Add_Batch_to_BatchPayemnt();
                        //add_Batch_to_BatchPayemnt.loadStudent(model.getValueAt(jTable1.getSelectedRow(), 0).toString(), model.getValueAt(jTable1.getSelectedRow(), 1).toString(), SY_id);
                        add_Batch_to_BatchPayemnt.displayPayedBills();
                        add_Batch_to_BatchPayemnt.setVisible(true);
                    } else {
                        //add_Batch_to_BatchPayemnt.loadStudent(model.getValueAt(jTable1.getSelectedRow(), 0).toString(), model.getValueAt(jTable1.getSelectedRow(), 1).toString(), SY_id);
                        add_Batch_to_BatchPayemnt.displayPayedBills();
                        add_Batch_to_BatchPayemnt.setVisible(true);

                    }

                    System.out.println("Batch Payment Mode");

                } else {
                    main.Name_SeachMode(model.getValueAt(jTable1.getSelectedRow(), 0).toString());
                    maincc.dispose();
                }

            }
        });

        menu.add(Select);

        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    menu.show(e.getComponent(), e.getX(), e.getY());

                }
            }

        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Search = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(436, 129, 0, 0));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Search");

        Search.setBackground(new java.awt.Color(255, 255, 255));
        Search.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        Search.setForeground(new java.awt.Color(0, 0, 0));
        Search.setNextFocusableComponent(jTable1);
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        jComboBox1.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox1.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Last Name", "First Name", "Student ID", " " }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setBackground(new java.awt.Color(22, 27, 34));
        jTable1.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Student ID", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionBackground(new java.awt.Color(153, 255, 153));
        jTable1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        if (jComboBox1.getSelectedIndex() == 0) {
            load_Names_Search();
        } else if (jComboBox1.getSelectedIndex() == 1) {
            load_Names_Search_Fname();
        } else if (jComboBox1.getSelectedIndex() == 2) {
            load_Names_Search_ID();
        }

    }//GEN-LAST:event_SearchActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        System.out.println(model.getValueAt(jTable1.getSelectedRow(), 0));
        if (StatementsMode) {
            paymentHistory.set_id(model.getValueAt(jTable1.getSelectedRow(), 0).toString());
            maincc.dispose();
        } else if (subsidyMode) {

            if (add_Subsidy_Student == null) {
                add_Subsidy_Student = new Add_Subsidy_Student();
                add_Subsidy_Student.set_subsididyList(subsidy_List);
                add_Subsidy_Student.loadStudent(model.getValueAt(jTable1.getSelectedRow(), 0).toString(), model.getValueAt(jTable1.getSelectedRow(), 1).toString());

                add_Subsidy_Student.setVisible(true);
                add_Subsidy_Student.set_subsididyList(subsidy_List);
                maincc.dispose();

            } else {
                add_Subsidy_Student.set_subsididyList(subsidy_List);
                add_Subsidy_Student.loadStudent(model.getValueAt(jTable1.getSelectedRow(), 0).toString(), model.getValueAt(jTable1.getSelectedRow(), 1).toString());

                add_Subsidy_Student.setVisible(true);
                maincc.dispose();
                System.out.println(subsidyMode + "Subsidy Mode");

            }

        } else if (BatchPayment) {
            if (add_Batch_to_BatchPayemnt == null) {
                add_Batch_to_BatchPayemnt = new Add_Batch_to_BatchPayemnt();
                add_Batch_to_BatchPayemnt.set_BatchPayment(BatchPayemnt_Main);
                add_Batch_to_BatchPayemnt.loadStudent(model.getValueAt(jTable1.getSelectedRow(), 0).toString(), model.getValueAt(jTable1.getSelectedRow(), 1).toString(), SY_id);
                // add_Batch_to_BatchPayemnt.displayPayedBills();
                add_Batch_to_BatchPayemnt.setVisible(true);
                this.setVisible(false);
                this.dispose();

            } else {
                add_Batch_to_BatchPayemnt.set_BatchPayment(BatchPayemnt_Main);
                add_Batch_to_BatchPayemnt.loadStudent(model.getValueAt(jTable1.getSelectedRow(), 0).toString(), model.getValueAt(jTable1.getSelectedRow(), 1).toString(), SY_id);
                // add_Batch_to_BatchPayemnt.displayPayedBills();
                add_Batch_to_BatchPayemnt.setVisible(true);
                this.setVisible(false);
                this.dispose();

            }

            System.out.println("Batch Payment Mode" + " Sy for Bacth Payment:" + SY_id);

        } else {
            main.Name_SeachMode(model.getValueAt(jTable1.getSelectedRow(), 0).toString());
            maincc.dispose();
        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            if (StatementsMode) {
                paymentHistory.set_id(model.getValueAt(jTable1.getSelectedRow(), 0).toString());
                maincc.dispose();
            } else if (subsidyMode) {

                if (add_Subsidy_Student == null) {
                    add_Subsidy_Student = new Add_Subsidy_Student();
                    add_Subsidy_Student.set_subsididyList(subsidy_List);
                    add_Subsidy_Student.loadStudent(model.getValueAt(jTable1.getSelectedRow(), 0).toString(), model.getValueAt(jTable1.getSelectedRow(), 1).toString());
                    add_Subsidy_Student.setVisible(true);

                    maincc.dispose();

                } else {
                    add_Subsidy_Student.set_subsididyList(subsidy_List);
                    add_Subsidy_Student.loadStudent(model.getValueAt(jTable1.getSelectedRow(), 0).toString(), model.getValueAt(jTable1.getSelectedRow(), 1).toString());
                    add_Subsidy_Student.setVisible(true);
                    maincc.dispose();
                    System.out.println(subsidyMode + "Subsidy Mode");

                }

            } else if (BatchPayment) {
                System.out.println("Batch Payment Mode" + BatchPayment);
                if (add_Batch_to_BatchPayemnt == null) {
                    add_Batch_to_BatchPayemnt = new Add_Batch_to_BatchPayemnt();
                    add_Batch_to_BatchPayemnt.set_BatchPayment(BatchPayemnt_Main);
                    add_Batch_to_BatchPayemnt.Student_Id = model.getValueAt(jTable1.getSelectedRow(), 0).toString();
                    add_Batch_to_BatchPayemnt.loadStudent(model.getValueAt(jTable1.getSelectedRow(), 0).toString(), model.getValueAt(jTable1.getSelectedRow(), 1).toString(), SY_id);
                    // add_Batch_to_BatchPayemnt.displayPayedBills();
                    add_Batch_to_BatchPayemnt.setVisible(true);
                    this.setVisible(false);
                    this.dispose();
                    System.out.println("Sy id for Batch Payment" + SY_id);
                } else {
                    add_Batch_to_BatchPayemnt.set_BatchPayment(BatchPayemnt_Main);
                    add_Batch_to_BatchPayemnt.Student_Id = model.getValueAt(jTable1.getSelectedRow(), 0).toString();
                    add_Batch_to_BatchPayemnt.loadStudent(model.getValueAt(jTable1.getSelectedRow(), 0).toString(), model.getValueAt(jTable1.getSelectedRow(), 1).toString(), SY_id);
                    //add_Batch_to_BatchPayemnt.displayPayedBills();
                    add_Batch_to_BatchPayemnt.setVisible(true);
                    this.setVisible(false);
                    this.dispose();

                    System.out.println("Sy id for Batch Payment" + SY_id);
                }

            } else {
                main.Name_SeachMode(model.getValueAt(jTable1.getSelectedRow(), 0).toString());
                maincc.dispose();
            }
        }

    }//GEN-LAST:event_jTable1KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Name_Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Name_Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Name_Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Name_Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Name_Search().setVisible(true);
            }
        });
    }

    void load_Names_Search() {

        try {

            String SearchMode = "%" + Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;
            model.setRowCount(0);
            ps = c.prepareStatement("Select id,F_name,M_name,L_name from student_info where L_name like '" + SearchMode + "'");
            rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4)});
            }

        } catch (SQLException ex) {
            Logger.getLogger(Name_Search.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void load_Names_Search_ID() {

        try {

            String SearchMode = "%" + Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;
            model.setRowCount(0);
            ps = c.prepareStatement("Select id,F_name,M_name,L_name from student_info where id like '" + SearchMode + "'");
            rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4)});
            }

        } catch (SQLException ex) {
            Logger.getLogger(Name_Search.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void load_Names_Search_Fname() {

        try {

            String SearchMode = "%" + Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;
            model.setRowCount(0);
            ps = c.prepareStatement("Select id,F_name,M_name,L_name from student_info where F_name like '" + SearchMode + "'");
            rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4)});
            }

        } catch (SQLException ex) {
            Logger.getLogger(Name_Search.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void NameSearch(Invoice cc) {
        main = cc;
    }

    void NameSearch_PaymentHistory(Statements cc) {
        paymentHistory = cc;
        StatementsMode = true;
    }

    void Name_Search_Subsidy(Subsidy_List cc) {
        subsidy_List = cc;
        SY_id = subsidy_List.SY_ID;
        subsidyMode = true;
    }

    void Name_search_BatchPayment(boolean batchpayentMmode, Batch_Payment cc, String Sy) {
        BatchPayment = batchpayentMmode;
        BatchPayemnt_Main = cc;
        SY_id = Sy;
        System.out.println("Batch Payment mode:" + BatchPayment + " SY for name seach is " + SY_id);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Search;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
