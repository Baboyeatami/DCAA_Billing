/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dcaa_billing;

import com.sun.org.apache.xpath.internal.operations.Gt;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.paint.Color;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jamie Eduardo Rosal <Jamiewertalmighty@gmail.com>
 */
public class Category_of_Charges extends javax.swing.JInternalFrame {

    DefaultTableModel model = new DefaultTableModel();
    JMenuItem Update = new JMenuItem("Update Category");
    //JMenuItem Select=new JMenuItem("Update Category");
    Addcategories addcategories = null;
    Category_of_Charges main = this;
    String CategoryID;

    JPopupMenu menu = new JPopupMenu();

    /**
     * Creates new form StudentInfo
     */
    public Category_of_Charges() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();

        Update.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (addcategories == null) {
                    addcategories = new Addcategories();
                    addcategories.set_Update(true, CategoryID, main);
                    addcategories.loadDAta_toUpdate();
                    addcategories.setVisible(true);
                } else {
                    addcategories.set_Update(true, CategoryID, main);
                    addcategories.loadDAta_toUpdate();
                    addcategories.setVisible(true);

                }

            }
        });

        menu.add(Update);
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    menu.show(e.getComponent(), e.getX(), e.getY());

                }
            }

        });

        LoadFees();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        SearchCreteria = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        Search = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 102));
        setClosable(true);
        setIconifiable(true);
        setTitle("Category of  Charges");
        setMaximumSize(new java.awt.Dimension(1200, 550));
        setMinimumSize(new java.awt.Dimension(845, 448));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(855, 498));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setBackground(new java.awt.Color(204, 255, 204));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Charge  ID", "Name", "Department", "School Year"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 840, 380));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Search by:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 80, 20));

        SearchCreteria.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        SearchCreteria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Charge ID", "Name", "Department", "School Year", " " }));
        SearchCreteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchCreteriaActionPerformed(evt);
            }
        });
        getContentPane().add(SearchCreteria, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 210, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Enter Keyword:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 110, 20));

        Search.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });
        getContentPane().add(Search, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 170, -1));

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton5.setText("NEW CATEGORY");
        jButton5.setActionCommand("Add");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 420, 140, 40));

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton6.setText("ReFresh");
        jButton6.setActionCommand("Add");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 420, 140, 40));

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton7.setText("UPDATE CHARGE");
        jButton7.setActionCommand("Add");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 420, -1, 40));

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton8.setText("Close");
        jButton8.setActionCommand("Add");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 420, 100, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchCreteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchCreteriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchCreteriaActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:

        if (addcategories == null) {
            addcategories = new Addcategories();
            addcategories.Set_Main_Class(this);
            addcategories.setVisible(true);
        } else {
            addcategories = null;
            addcategories = new Addcategories();
            addcategories.Set_Main_Class(this);
            addcategories.setVisible(true);

        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        LoadFees();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        if (addcategories == null) {
            addcategories = new Addcategories();
            addcategories.set_Update(true, CategoryID, main);
            addcategories.loadDAta_toUpdate();
            addcategories.setVisible(true);
        } else {
            addcategories.set_Update(true, CategoryID, main);
            addcategories.loadDAta_toUpdate();
            addcategories.setVisible(true);

        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        System.out.println(getBounds());
        dispose();

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        CategoryID = String.valueOf(model.getValueAt(jTable1.getSelectedRow(), 0));
        System.out.println(CategoryID);

    }//GEN-LAST:event_jTable1MouseClicked

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        if (SearchCreteria.getSelectedIndex() == 0) {
            Load_ChargeID();
        } else if (SearchCreteria.getSelectedIndex() == 1) {
            Load_Name();
        } else if (SearchCreteria.getSelectedIndex() == 2) {
            Load_Department();
        } else if (SearchCreteria.getSelectedIndex() == 3) {
            Load_SchoolYear();
        }

        System.out.println(SearchCreteria.getSelectedIndex());

    }//GEN-LAST:event_SearchActionPerformed

    void LoadFees() {
        try {
            model.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;

            ps = c.prepareStatement("Select idCategory_of_charges, Charge_Name, Category_Department, School_Year from category_of_charges");
            rs = ps.executeQuery();

            while (rs.next()) {

                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)});

            }

            rs.close();
            ps.close();

        } catch (SQLException ex) {
            Logger.getLogger(Category_of_Charges.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void Load_ChargeID() {
        try {
            model.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            String search = "%" + this.Search.getText() + "%";
            ps = c.prepareStatement("Select idCategory_of_charges, Charge_Name, Category_Department, School_Year from category_of_charges where idCategory_of_charges like '" + search + "'");
            rs = ps.executeQuery();

            while (rs.next()) {

                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)});

            }

            rs.close();
            ps.close();

        } catch (SQLException ex) {
            Logger.getLogger(Category_of_Charges.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void Load_Department() {
        try {
            model.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            String search = "%" + this.Search.getText() + "%";
            ps = c.prepareStatement("Select idCategory_of_charges, Charge_Name, Category_Department, School_Year from category_of_charges where Category_Department like '" + search + "'");
            rs = ps.executeQuery();

            while (rs.next()) {

                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)});

            }

            rs.close();
            ps.close();

        } catch (SQLException ex) {
            Logger.getLogger(Category_of_Charges.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void Load_Name() {
        try {
            model.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            String search = "%" + this.Search.getText() + "%";
            ps = c.prepareStatement("Select idCategory_of_charges, Charge_Name, Category_Department, School_Year from category_of_charges where Charge_Name like '" + search + "'");
            rs = ps.executeQuery();

            while (rs.next()) {

                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)});

            }

            rs.close();
            ps.close();

        } catch (SQLException ex) {
            Logger.getLogger(Category_of_Charges.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void Load_SchoolYear() {
        try {
            model.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            String search = "%" + this.Search.getText() + "%";
            ps = c.prepareStatement("Select idCategory_of_charges, Charge_Name, Category_Department, School_Year from category_of_charges where  School_Year like '" + search + "'");
            rs = ps.executeQuery();

            while (rs.next()) {

                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)});

            }

            rs.close();
            ps.close();

        } catch (SQLException ex) {
            Logger.getLogger(Category_of_Charges.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Search;
    private javax.swing.JComboBox<String> SearchCreteria;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
