/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dcaa_billing;

import com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Jamie Eduardo Rosal <Jamiewertalmighty@gmail.com>
 */
public class Invoice extends javax.swing.JFrame {

    ArrayList<String> Sydisplay = new ArrayList<>();
    ArrayList<String> idSydisplay = new ArrayList<>();
    DefaultComboBoxModel SYBoxModel = new DefaultComboBoxModel();
    DefaultTableModel model = new DefaultTableModel();
    String ID = null, idSY = null;
    ArrayList<String> SelectedPayment = new ArrayList<>();
    ArrayList<String> Selected_bill = new ArrayList<>();
    int OrNumber = 0;
    Cash_Input cash_Input = null;
    double Cash;
    double Amount = 0, display_Amount = 0, partial_Amount, ResiboAMount = 0;
    String RefNo;
    boolean partialPayMode, Many_partialPayment;
    private static DecimalFormat df2 = new DecimalFormat("###.##");
    private static DecimalFormat df1 = new DecimalFormat("#,###.##");
    Invoice main = this;
    JMenuItem partial = new JMenuItem("Partial Payment");
    JPopupMenu menu = new JPopupMenu();
    Name_Search Search;
    public int User;
    double CashTendered, Change;

    /**
     * Creates new form Invoice
     */
    public Invoice() {

        initComponents();
        JOptionPane.showMessageDialog(this, "Please be reminded to Check official receipt number before starting to transacting.");
        model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        loadSY();
        LoadORNum();
        load_running_Total();

        partial.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("Partial Payment mode");
                System.out.println(partial_Amount);
                if (cash_Input == null) {
                    cash_Input = new Cash_Input(main);
                    cash_Input.setVisible(true);
                    cash_Input.Partial = true;

                } else {
                    cash_Input.Cash1.setText("");
                    cash_Input.setVisible(true);
                    cash_Input.Partial = true;

                }

            }
        });

        menu.add(partial);

        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    menu.show(e.getComponent(), e.getX(), e.getY());

                }

            }

        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jMenu2 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SchoolYear = new javax.swing.JComboBox<>();
        Student_Id = new javax.swing.JTextField();
        Name = new javax.swing.JLabel();
        GradeandSection = new javax.swing.JLabel();
        RuniingTotal = new javax.swing.JLabel();
        ORnum = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel22 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        Total = new javax.swing.JLabel();
        Total1 = new javax.swing.JLabel();
        AmountobePayed = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        Partial = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        SelectedBills = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Partial2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu12 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();

        jTextField2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jMenu2.setText("jMenu2");

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenu6.setText("File");
        jMenuBar3.add(jMenu6);

        jMenu7.setText("Edit");
        jMenuBar3.add(jMenu7);

        jMenu8.setText("jMenu8");

        jMenuItem6.setText("jMenuItem6");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 102));
        setBounds(new java.awt.Rectangle(237, 59, 0, 0));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("User: ********");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(592, 30, 130, 20));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Student ID:");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("SY:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 30, 20));

        SchoolYear.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        SchoolYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", " " }));
        SchoolYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SchoolYearItemStateChanged(evt);
            }
        });
        SchoolYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SchoolYearActionPerformed(evt);
            }
        });
        jPanel1.add(SchoolYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 130, -1));

        Student_Id.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        Student_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Student_IdActionPerformed(evt);
            }
        });
        jPanel1.add(Student_Id, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 170, -1));

        Name.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        Name.setForeground(new java.awt.Color(255, 255, 255));
        Name.setText("Student Name:");
        jPanel1.add(Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 370, 20));

        GradeandSection.setBackground(new java.awt.Color(255, 255, 255));
        GradeandSection.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        GradeandSection.setForeground(new java.awt.Color(255, 255, 255));
        GradeandSection.setText("Grade and Section:");
        jPanel1.add(GradeandSection, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 340, 20));

        RuniingTotal.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        RuniingTotal.setForeground(new java.awt.Color(255, 255, 255));
        RuniingTotal.setText("*******");
        jPanel1.add(RuniingTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 50, 150, 20));

        ORnum.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ORnum.setForeground(new java.awt.Color(255, 255, 255));
        ORnum.setText("Official Receipt No. ********");
        jPanel1.add(ORnum, new org.netbeans.lib.awtextra.AbsoluteConstraints(588, 10, 280, 20));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Running Total:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 50, 120, 20));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Student Name:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, 20));

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Grade and Section:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, 20));

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setBackground(new java.awt.Color(255, 255, 255));
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "DATE POSTED", "REF NO.", "PARTICULARS", "AMOUNT", "DISCOUNT", "BALANCE", "Select", "Partial Pay"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionBackground(new java.awt.Color(0, 153, 255));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTable1MouseExited(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
            jTable1.getColumnModel().getColumn(7).setResizable(false);
        }

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 80, 860, 190));

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 153, 51));
        jLabel22.setText("Lapu-lapu St., Zone III, Digos City");
        jPanel4.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 30, 280, 20));

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 51, 51));
        jLabel25.setText("ALWAYS CHECK Receipt No. on printer");
        jPanel4.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, 270, 20));

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(0, 153, 51));
        jLabel26.setText("INVOICE");
        jPanel4.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 50, 80, 20));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 350, 100, 50));

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton6.setText("Pay");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 350, 100, 50));

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("TOTAL BALANCE:");
        jPanel4.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 280, 110, 20));

        Total.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Total.setForeground(new java.awt.Color(255, 255, 255));
        Total.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Total.setText("*******");
        jPanel4.add(Total, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 280, 210, 20));

        Total1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Total1.setForeground(new java.awt.Color(255, 255, 255));
        Total1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Total1.setText("Total Selected Amount:");
        jPanel4.add(Total1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 340, 160, 50));

        AmountobePayed.setBackground(new java.awt.Color(51, 51, 51));
        AmountobePayed.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        AmountobePayed.setForeground(new java.awt.Color(255, 255, 255));
        AmountobePayed.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AmountobePayed.setText("*******");
        jPanel4.add(AmountobePayed, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 330, 290, 70));

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel31.setText("TOTAL BALANCE:");
        jPanel4.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 280, 110, 20));

        Partial.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Partial.setForeground(new java.awt.Color(255, 255, 255));
        Partial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Partial.setText("*******");
        Partial.setToolTipText("");
        Partial.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        Partial.setVerifyInputWhenFocusTarget(false);
        jPanel4.add(Partial, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 210, 20));
        Partial.getAccessibleContext().setAccessibleName("");

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton2.setText("Search");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 350, 100, 50));

        SelectedBills.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        SelectedBills.setForeground(new java.awt.Color(255, 255, 255));
        SelectedBills.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SelectedBills.setText("Selected Bills");
        SelectedBills.setToolTipText("");
        SelectedBills.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        SelectedBills.setVerifyInputWhenFocusTarget(false);
        jPanel4.add(SelectedBills, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 210, 20));

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(0, 153, 51));
        jLabel27.setText("DIGOS CENTRAL ADVENTIST ACADEMY");
        jPanel4.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 300, 20));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/DCAA Logo without Background small.png"))); // NOI18N
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, -1, -1));

        Partial2.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        Partial2.setText("Partial");
        Partial2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Partial2ActionPerformed(evt);
            }
        });
        jPanel4.add(Partial2, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 350, 100, 50));

        jMenu1.setText("Partial Payment");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, 0));
        jMenuItem1.setText("Pay Partial");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenu5.setText("Set OR Number");
        jMenu1.add(jMenu5);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Pay");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu9.setText("Set OR Number");

        jMenuItem2.setText("Set OR Number");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem2);

        jMenuBar1.add(jMenu9);

        jMenu10.setText("Search Student");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Search");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem3);

        jMenuBar1.add(jMenu10);

        jMenu11.setText("Print Collection Report");

        jMenuItem5.setText("Print Collection");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem5);

        jMenuBar1.add(jMenu11);

        jMenu12.setText("Reprint Receipt");
        jMenu12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu12ActionPerformed(evt);
            }
        });

        jMenuItem7.setText("RePrint");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu12.add(jMenuItem7);

        jMenuBar1.add(jMenu12);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SchoolYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SchoolYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SchoolYearActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("");
        dispose();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void Student_IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Student_IdActionPerformed
        // TODO add your handling code here:
        System.out.println(ID);
        // loadBill(Student_Id.getText(),String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())));
        LoadStudentInfo();
        displayPayedBills();

    }//GEN-LAST:event_Student_IdActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        System.out.println(String.valueOf(model.getValueAt(jTable1.getSelectedRow(), 1)));
        RefNo = String.valueOf(model.getValueAt(jTable1.getSelectedRow(), 1));
        partial_Amount = Double.parseDouble((String) model.getValueAt(jTable1.getSelectedRow(), 5));
        System.out.println("Balance Selected is :" + partial_Amount);
        AmountobePayed.setText(String.valueOf(partial_Amount));

        System.out.println("Partial Payment Mode:" + partialPayMode);

        loadSelectedPayment();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseExited
        // TODO add your handling code here:
        // loadSelectedPayment();
    }//GEN-LAST:event_jTable1MouseExited

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (OrNumber == 0) {
            OrNumber = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Official Receipt Number"));
            SelectedPayment.clear();
            get_selected_payments();
            Pay();
            load_running_Total();
        } else {
            SelectedPayment.clear();
            get_selected_payments();
            Pay();
            load_running_Total();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.out.println("Many Partial Payment mode");
        System.out.println(partial_Amount);
        View_Total_Value();

        if (cash_Input == null) {
            System.out.println("Many Partial Payment mode");
            cash_Input = new Cash_Input(this);
            cash_Input.SetCash_Name("ENTER CASH");
            cash_Input.setVisible(true);
            cash_Input.Partial = true;

        } else {
            System.out.println("Many Partial Payment mode");
            cash_Input = new Cash_Input(this);
            cash_Input.SetCash_Name("ENTER CASH");
            cash_Input.setVisible(true);
            cash_Input.Partial = true;

        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (Search == null) {
            Search = new Name_Search();
            Search.setVisible(true);
            Search.setAlwaysOnTop(true);
            Search.NameSearch(this);

        } else {
            Search.setVisible(true);
            Search.setAlwaysOnTop(true);
            Search.NameSearch(this);

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void SchoolYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SchoolYearItemStateChanged
        // TODO add your handling code here
        System.out.println("Change SY load bill..");
        System.out.println(ID);
        LoadStudentInfo();
        displayPayedBills();

    }//GEN-LAST:event_SchoolYearItemStateChanged

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        try {
            OrNumber = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Official Receipt Number"));
            ORnum.setText("Official Receipt No." + String.format("%010d", OrNumber));
            JOptionPane.showMessageDialog(this, "Official Receipt Number Updated!");
        } catch (NumberFormatException e) {

            JOptionPane.showMessageDialog(this, "Invalid Input Entered");

        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        if (Search == null) {
            Search = new Name_Search();
            Search.setVisible(true);
            Search.setAlwaysOnTop(true);
            Search.NameSearch(this);

        } else {
            Search.setVisible(true);
            Search.setAlwaysOnTop(true);
            Search.NameSearch(this);

        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        SelectedPayment.clear();
        get_selected_payments();
        Pay();
        load_running_Total();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        try {
            PrintCollectionReport();
        } catch (SQLException ex) {
            Logger.getLogger(Invoice.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenu12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu12ActionPerformed
        int op = JOptionPane.showConfirmDialog(this, "Do you want to reprint the reciept with same OR number?", "REPRINT RECIEPT", JOptionPane.YES_NO_OPTION);
        if (op == 0) {
            try {
                REPrintReceibo(ID, JOptionPane.showInputDialog(this, "Enter Official Reciept Number"));
            } catch (SQLException ex) {
                Logger.getLogger(Invoice.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Reprint Cancelled");
        }
    }//GEN-LAST:event_jMenu12ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        int op = JOptionPane.showConfirmDialog(this, "Do you want to reprint the reciept with same OR number?", "REPRINT RECIEPT", JOptionPane.YES_NO_OPTION);

        if (Student_Id.getText().equals("") || Student_Id.getText() == null) {
            JOptionPane.showMessageDialog(this, "Student ID not Valid");
            Student_Id.requestFocus();
        } else {

            if (op == 0) {
                try {
                    REPrintReceibo(Student_Id.getText(), JOptionPane.showInputDialog(this, "Enter Official Reciept Number"));
                } catch (SQLException ex) {
                    Logger.getLogger(Invoice.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Reprint Cancelled");
            }
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void Partial2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Partial2ActionPerformed
        System.out.println("Many Partial Payment mode");
        System.out.println(partial_Amount);
        View_Total_Value();

        if (cash_Input == null) {
            System.out.println("Many Partial Payment mode");
            cash_Input = new Cash_Input(this);
            cash_Input.SetCash_Name("ENTER CASH");
            cash_Input.setVisible(true);
            cash_Input.Partial = true;

        } else {
            System.out.println("Many Partial Payment mode");
            cash_Input = new Cash_Input(this);
            cash_Input.SetCash_Name("ENTER CASH");
            cash_Input.setVisible(true);
            cash_Input.Partial = true;

        }
    }//GEN-LAST:event_Partial2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Invoice().setVisible(true);
            }
        });
    }

    void Name_SeachMode(String Id) {
        Student_Id.setText(Id);
        LoadStudentInfo();
        displayPayedBills();

    }

    void PrintReceibo(String Id, String Sy) {
        try {
            JasperReport JR;
            JasperPrint JP;

            // String Q="%"+this.txtSearch.getText() +"%";
            // String Source="C:\\Users\\JAMIEXXX3\\Documents\\NetBeansProjects\\Phonelist\\src\\Forms\\report1.jrxml";
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\Resibo.jrxml");

            String SQL = "Select * from Invoice where Student_Info_idStudent_Info='" + Id + "' AND OrNum='" + String.format("%010d", OrNumber) + "'";
            String Location = System.getProperty("user.dir") + "\\\\reports\\\\";

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);

            HashMap m = new HashMap<>();
            String timeStamp = new SimpleDateFormat("yyyy-MM-dd").format(Calendar.getInstance().getTime());
            m.put("StudentName", Name.getText());
            m.put("StudentID", Student_Id.getText());
            m.put("SY", SchoolYear.getSelectedItem());
            m.put("Department", GradeandSection.getText());
            m.put("Date", timeStamp);
            m.put("CashT", df1.format(CashTendered));
            m.put("Change", df1.format(Change));

            int op = JOptionPane.showOptionDialog(this, "Do you want to add remarks on the receipt?", "Remarks", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

            if (op == 0) {
                String Remarks = JOptionPane.showInputDialog(this, "Enter receipt Remarks");
                m.put("remarks", "Remarks:" + Remarks);
                System.out.println("Remarks: " + Remarks);
            } else {
                m.put("remarks", "Remarks:");

            }

            System.out.println("Partial_Payment mode on Reciept Generation:" + partialPayMode);
            if (partialPayMode) {
                m.put("Total", Amount);
                // CashTendered = Double.parseDouble(JOptionPane.showInputDialog(this, "Enter Cash Tendered"));
                m.put("CashT", df1.format(Cash));
                m.put("Change", df1.format(Cash - Amount));
            } else {
                m.put("Total", df1.format(Amount));
                m.put("CashT", df1.format(CashTendered));
                m.put("Change", df1.format(Change));

            }

            m.put("SUBREPORT_DIR", Location);
            //m.put("SY", SchoolYear.getSelectedItem().toString());
            // m.put("Description", );
            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());
            System.out.println("Offial Receipt Generated");
            JasperViewer.viewReport(JP, false);
            partialPayMode = false;
            CashTendered = 0;
            Change = 0.0;

        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

    }

    void REPrintReceibo(String Id, String ORNUM) throws SQLException {
        try {
            JasperReport JR;
            JasperPrint JP;

            // String Q="%"+this.txtSearch.getText() +"%";
            // String Source="C:\\Users\\JAMIEXXX3\\Documents\\NetBeansProjects\\Phonelist\\src\\Forms\\report1.jrxml";
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\Resibo.jrxml");

            String SQL = "Select * from Invoice where Student_Info_idStudent_Info='" + Id + "' AND OrNum='" + String.format("%010d", Integer.parseInt(ORNUM)) + "'";
            String Location = System.getProperty("user.dir") + "\\\\reports\\\\";

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);

            HashMap m = new HashMap<>();
            String timeStamp = new SimpleDateFormat("yyyy-MM-dd").format(Calendar.getInstance().getTime());
            m.put("StudentName", Name.getText());
            m.put("StudentID", Student_Id.getText());
            m.put("SY", SchoolYear.getSelectedItem());
            m.put("Department", GradeandSection.getText());
            m.put("Date", timeStamp);

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps = c.prepareStatement("SELECT sum(Value)  FROM dcaa_databse.invoice where Student_Info_idStudent_Info= '" + Id + "' and OrNum='" + String.format("%010d", Integer.parseInt(ORNUM)) + "'");
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                m.put("Total", df1.format(rs.getDouble(1)));
            }

            m.put("SUBREPORT_DIR", Location);
            //m.put("SY", SchoolYear.getSelectedItem().toString());
            // m.put("Description", );
            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());
            System.out.println("Offial Receipt Generated");
            JasperViewer.viewReport(JP, false);
            partialPayMode = false;

            Activity_logReprint(Id, ORNUM);

        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

    }

    void loadSY() {
        try {

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;
            ps = c.prepareStatement("Select idschool_year,School_Year,Semester from school_year order by idschool_year desc");
            rs = ps.executeQuery();
            while (rs.next()) {
                Sydisplay.add(rs.getString(2) + "-" + rs.getString(3));
                idSydisplay.add(rs.getString(1));
            }
            rs.close();
            DefaultComboBoxModel SYBoxModel = new DefaultComboBoxModel(Sydisplay.toArray());
            SchoolYear.setModel(SYBoxModel);

        } catch (SQLException ex) {
            System.out.println(ex);
        }

    }

    void loadBill(String Id, String Sy) {
        try {
            model.setRowCount(0);
            System.out.println(SchoolYear + " School year");
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps, ps1, ps2, ps_balance;
            ResultSet rs, rs1, rs2, rs_balance;
            ps = c.prepareStatement("Select Bill_Date,ReferenceNo,Particulars,Amount,Discounts_idDiscounts,Fee_Charges_idFee_Charges from billing where Student_Info_idStudent_Info='" + Id + "' AND School_Year_idSchool_Year='" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "'");
            rs = ps.executeQuery();

            String discountDisplay = null;
            String display_Value = "";
            double balance;

            while (rs.next()) {

                if (rs.getString(5).equals("-1")) {
                    discountDisplay = "None";
                    display_Value = rs.getString(4);
                } else {
                    ps1 = c.prepareStatement("Select Value,Type from discounts where idDiscounts='" + rs.getString(5) + "'");
                    rs1 = ps1.executeQuery();
                    if (rs1.next()) {
                        System.out.println("Discount type " + rs.getString(2));

                        ps2 = c.prepareStatement("Select Value from fee_charges where idFee_Charges='" + rs.getString(6) + "'");
                        rs2 = ps2.executeQuery();
                        if (rs2.next()) {
                            display_Value = rs2.getString(1);
                        }

                    }

                }

                ps_balance = c.prepareStatement("Select Value from invoice where Particulars='" + rs.getString("Amount") + "'");
                rs_balance = ps_balance.executeQuery();

                if (rs_balance.next()) {
                    balance = rs.getDouble("Amount") - rs_balance.getDouble("1");
                } else {
                    balance = 0.0;
                }

                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), display_Value, discountDisplay, balance, rs.getString(4), false});

            }
            rs.close();

            ps = c.prepareStatement("Select Sum(Amount) from billing where Student_Info_idStudent_Info='" + Id + "' AND School_Year_idSchool_Year='" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "'");
            rs = ps.executeQuery();

            if (rs.next()) {
                double monthly = Double.parseDouble(rs.getString(1)) / 10;

                Total.setText(rs.getString(1));

                System.out.println(rs.getString(1));
                System.out.println("Monthly Installment:" + monthly);
            }

            rs.close();

        } catch (SQLException ex) {
            Logger.getLogger(StudentBill.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void setBill(String id, String sy) {

    }

    void LoadStudentInfo() {

        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select F_name,M_name,L_name,GradeLevel from student_info where id='" + Student_Id.getText() + "'");
            rs = ps.executeQuery();
            if (rs.next()) {
                Name.setText(rs.getString(3) + "," + rs.getString(1) + " " + rs.getString(2));
                GradeandSection.setText(rs.getString(4));
                System.out.println(rs.getString(3) + "," + rs.getString(1) + " " + rs.getString(2));
            }

        } catch (SQLException ex) {
            Logger.getLogger(Invoice.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void get_selected_payments() {

        for (int i = 0; i < model.getRowCount(); i++) {
            boolean selected = (boolean) model.getValueAt(i, 6);
            if (selected) {
                SelectedPayment.add((String) model.getValueAt(i, 1));

            }
        }
        System.out.println(SelectedPayment);

    }

    void Pay() {

        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            System.out.println(SelectedPayment + " selected payments");
            Amount = 0;

            for (int i = 0; i < SelectedPayment.size(); i++) {
                ps = c.prepareStatement("Select Amount from billing where ReferenceNo='" + SelectedPayment.get(i) + "'");
                rs = ps.executeQuery();

                if (rs.next()) {
                    System.out.println("Amount on " + SelectedPayment.indexOf(i) + "  " + rs.getDouble(1));
                    Amount = Amount + rs.getDouble("Amount");
                }

            }

            ResiboAMount = Amount;
            System.out.println("Resibo Amount=" + ResiboAMount);
            System.out.println("Amount to be paid " + Amount);

            if (cash_Input == null && Amount > 0) {
                cash_Input = new Cash_Input(this);
                cash_Input.setVisible(true);
            } else {

                if (Amount > 0) {
                    System.out.println(Amount + "Current Amount");
                    cash_Input.Cash1.setText("");
                    cash_Input.setVisible(true);
                    cash_Input.Cash1.requestFocus();

                } else {
                    JOptionPane.showMessageDialog(this, "No bill selected ");
                }

            }

            System.out.println(Cash + " Cash");
            System.out.println("Amount POTa:" + Amount);

        } catch (SQLException ex) {
            Logger.getLogger(Invoice.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void computeTrasaction() {
        try {
            System.out.println("AMOUNTTTTTT: " + Amount);
            System.out.println("CASHHHHHH: " + Cash);
            if (OrNumber == 0) {
                JOptionPane.showMessageDialog(this, "Cannot proceed transaction OR number not set.");
            } else {

                if (Amount > Cash) {
                    JOptionPane.showMessageDialog(this, "Insuficient Cash", "Invalid Cash Input", JOptionPane.ERROR_MESSAGE);
                } else if (Amount <= 0) {
                    JOptionPane.showMessageDialog(this, "Balace Invalid ", " Transaction", JOptionPane.ERROR_MESSAGE);
                } else {
                    DBConnection.init();
                    Connection c = DBConnection.getConnection();
                    PreparedStatement ps;
                    ResultSet rs;

                    for (int i = 0; i < SelectedPayment.size(); i++) {
                        String timeStamp = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime());

                        ps = c.prepareStatement("Select Amount,Fee_Charges_idFee_Charges,School_Year_idSchool_Year from billing where ReferenceNo='" + SelectedPayment.get(i) + "'");
                        rs = ps.executeQuery();
                        System.out.println(model.getValueAt(i, 5) + "             ...............................................Balance");
                        if (rs.next()) {
                            ps = c.prepareStatement("Insert into invoice (Value, Particulars, Category_of_charges_idCategory_of_charges, Student_Info_idStudent_Info, OrNum, DATE, School_Year_idSchool_Year, UseAccounts_idUseAccounts)values" + "('" + rs.getString(1) + "','" + SelectedPayment.get(i) + "','" + rs.getString(2) + "','" + Student_Id.getText() + "','" + String.format("%010d", OrNumber) + "','" + timeStamp + "','" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "','" + getUser() + "')");
                            ps.execute();

                        }

                    }

                    ORnum.setText("Official Receipt No:" + OrNumber);
                    System.out.println(OrNumber);
                    double change = Cash - Amount;
                    Change = change;
                    DecimalFormat d = new DecimalFormat("'P'0.00");
                    JOptionPane.showMessageDialog(this, "Transaction Complete\n Change is:" + d.format(change));
                    System.out.println(Student_Id.getText());
                    System.out.println(SchoolYear.getSelectedItem());
                    PrintReceibo(Student_Id.getText(), idSydisplay.get(SchoolYear.getSelectedIndex()));
                    Activity_log();
                    OrNumber++;
                    Amount = 0;
                    ResiboAMount = 0;
                }

            }
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    void Activity_log() {

        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;
            String timeStamp = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime());

            ps = c.prepareStatement("Insert into activity_log ( Activity_name, Description, Date, UseAccounts_idUseAccounts) values ('Invoice Transaction','" + OrNumber + "','" + timeStamp + "','" + User + "')");
            ps.execute();
            System.out.println("activity loged");

        } catch (SQLException ex) {
            Logger.getLogger(Section.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void Activity_logReprint(String Id, String OR) {

        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;
            String timeStamp = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime());

            ps = c.prepareStatement("Insert into activity_log ( Activity_name, Description, Date, UseAccounts_idUseAccounts) values ('Reprint Reciept','" + OR + "','" + timeStamp + "','" + User + "')");
            ps.execute();
            System.out.println("activity loged");

        } catch (SQLException ex) {
            Logger.getLogger(Section.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void loadSelectedPayment() {
        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps, ps_invoice;
            ResultSet rs, rs_invoice;

            for (int i = 0; i < model.getRowCount(); i++) {
                boolean selected = (boolean) model.getValueAt(i, 6);
                if (selected) {
                    Selected_bill.add((String) model.getValueAt(i, 1));

                }
            }

            System.out.println(Selected_bill + " selected payments");

            for (int i = 0; i < Selected_bill.size(); i++) {

                ps = c.prepareStatement("Select ReferenceNo,Amount from billing where ReferenceNo='" + Selected_bill.get(i) + "'");
                rs = ps.executeQuery();
                if (rs.next()) {
                    System.out.println("Query on " + Selected_bill.get(i));
                    ps_invoice = c.prepareStatement("Select Particulars,Sum(Value) from invoice where Student_Info_idStudent_Info='" + Student_Id.getText() + "' AND School_Year_idSchool_Year='" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "' AND Particulars='" + Selected_bill.get(i) + "' ");
                    rs_invoice = ps_invoice.executeQuery();
                    while (rs_invoice.next()) {
                        System.out.println(rs.getString("ReferenceNo") + "Checking on" + rs_invoice.getString("Particulars"));

                        if (rs.getString("ReferenceNo").equals(rs_invoice.getString("Particulars"))) {
                            System.out.println(rs.getDouble("Amount") + " AMount " + "Invoice " + rs_invoice.getDouble(2) + "on Reference no:" + rs.getString(1));
                            double balance = rs.getDouble("Amount") - rs_invoice.getDouble(2);
                            System.out.println("Selected bill on " + Selected_bill.get(i) + " is: " + balance);
                            if (balance > 0) {
                                System.out.println("Amount on " + Selected_bill.indexOf(i) + "  " + rs.getDouble(1));
                                display_Amount = display_Amount + balance;
                            }

                        } else if (rs_invoice.getString("Particulars") == null) {
                            System.out.println(rs.getString(2) + " Amount added on" + rs.getString(1));
                            display_Amount = display_Amount + rs.getDouble(2);

                        }

                    }

                }
            }

            System.out.println("Total Amount Selected:" + display_Amount);
            System.out.println("Selected bill no:" + Selected_bill.size());
            SelectedBills.setText("No. of Selected Bills:" + Selected_bill.size());
            if (Selected_bill.size() == 0) {
                partialPayMode = true;
                Partial.setText("Partial payment");
                AmountobePayed.setText(String.valueOf(df1.format(partial_Amount)));

            } else {

                AmountobePayed.setText(String.valueOf(df1.format(display_Amount)));
                Selected_bill.clear();
                display_Amount = 0;
                Partial.setText("");
                partialPayMode = false;
            }

        } catch (SQLException ex) {
            Logger.getLogger(Invoice.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void displayPayedBills() {
        ResiboAMount = 0;
        System.out.println("Resibo Amount Reset:" + ResiboAMount);
        try {
            ArrayList<String> refno_from_Bill = new ArrayList<>();
            ArrayList<String> refno_from_Invoice = new ArrayList<>();

            ArrayList<String> current = new ArrayList<>();
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps, ps1, ps2, ps_invoice, ps_Sum;
            ResultSet rs, rs1, rs2, rs_invoice, rs_Sum;
            double monthly = 0, total = 0, balance = 0;

            ps = c.prepareStatement("Select ReferenceNo,Amount from billing where Student_Info_idStudent_Info='" + Student_Id.getText() + "' AND School_Year_idSchool_Year='" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "'");
            rs = ps.executeQuery();

            while (rs.next()) {
                System.out.println(rs.getString(1) + "Added to Bills");
                refno_from_Bill.add(rs.getString(1));

                ps_invoice = c.prepareStatement("Select Particulars,Sum(Value) from invoice where Student_Info_idStudent_Info='" + Student_Id.getText() + "' AND School_Year_idSchool_Year='" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "' AND Particulars='" + rs.getString(1) + "' ");
                rs_invoice = ps_invoice.executeQuery();

                while (rs_invoice.next()) {

                    if (rs.getString("ReferenceNo").equals(rs_invoice.getString("Particulars"))) {
                        System.out.println(rs.getDouble("Amount") + " AMount " + "Invoice " + rs_invoice.getDouble(2) + "on Reference no:" + rs.getString(1));
                        if (rs.getDouble("Amount") <= rs_invoice.getDouble(2)) {
                            System.out.println("Account paid on:" + rs.getString(1));
                            System.out.println(rs.getString(1) + " Added to Balance");
                            refno_from_Invoice.add(rs.getString(1));

                        } else {

                        }
                    }

                }
                rs_invoice.close();
            }

            refno_from_Bill.removeAll(refno_from_Invoice);
            current = refno_from_Bill;
            model.setRowCount(0);

            System.out.println(current.size() + "bill  Current size");
            for (int i = 0; i < current.size(); i++) {

                System.out.println(idSydisplay.get(SchoolYear.getSelectedIndex()) + " School year");
                System.out.println(current.get(i));
                ps = c.prepareStatement("Select Bill_Date,ReferenceNo,Particulars,Amount,Discounts_idDiscounts,Fee_Charges_idFee_Charges from billing where Student_Info_idStudent_Info='" + Student_Id.getText() + "' AND School_Year_idSchool_Year='" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "' AND ReferenceNo='" + current.get(i) + "'");
                rs = ps.executeQuery();

                String discountDisplay = null;
                String display_Value = "";

                while (rs.next()) {

                    if (rs.getString(5).equals("-1")) {
                        discountDisplay = "None";
                        display_Value = rs.getString(4);
                    } else {
                        ps1 = c.prepareStatement("Select Discount_Name,type from discounts where idDiscounts='" + rs.getString(5) + "'");
                        rs1 = ps1.executeQuery();
                        if (rs1.next()) {
                            System.out.println(rs1.getString(2) + " Discount Type");
                            if (rs1.getString(2).equals("1")) {
                                discountDisplay = rs1.getString(1);
                                ps2 = c.prepareStatement("Select Value from fee_charges where idFee_Charges='" + rs.getString(6) + "'");
                                rs2 = ps2.executeQuery();
                                if (rs2.next()) {
                                    display_Value = rs2.getString(1);
                                }

                            } else {
                                discountDisplay = rs1.getString(1) + "%";
                                ps2 = c.prepareStatement("Select Value from fee_charges where idFee_Charges='" + rs.getString(6) + "'");
                                rs2 = ps2.executeQuery();
                                if (rs2.next()) {
                                    display_Value = rs2.getString(1);
                                }

                            }
                        }

                    }

                    ps_invoice = c.prepareStatement("Select Particulars,Sum(Value) from invoice where Student_Info_idStudent_Info='" + Student_Id.getText() + "' AND School_Year_idSchool_Year='" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "' ANd particulars='" + current.get(i) + "' ");
                    rs_invoice = ps_invoice.executeQuery();

                    while (rs_invoice.next()) {
                        System.out.println(rs.getString("ReferenceNo") + " " + rs_invoice.getString("Particulars"));
                        System.out.println(rs.getDouble("Amount") + " " + rs_invoice.getDouble("sum(Value)"));

                        balance = rs.getDouble("Amount") - rs_invoice.getDouble(2);
                        System.out.println("Balance on:" + rs.getString("ReferenceNo") + " is:" + balance);

                    }

                    model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), display_Value, discountDisplay, df2.format(balance), false});

                    total = total + balance;
                    balance = 0;

                }
                rs.close();

                //monthly=total/10;
                Total.setText(String.valueOf(df1.format(total)));
                // Monthly_intallment.setText(String.valueOf(monthly));
                //System.out.println("Monthly Installment:" + monthly);

            }

            System.out.println(refno_from_Bill);
            System.out.println(refno_from_Invoice);
            System.out.println("Current bill " + current);
            refno_from_Bill.clear();
            refno_from_Invoice.clear();
            current.clear();

        } catch (SQLException ex) {
            Logger.getLogger(Invoice.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void PartialPayment() {
        try {

            if (Amount > Cash) {
                JOptionPane.showMessageDialog(this, "Insuficient Cash", "Invalid Cash Input", JOptionPane.ERROR_MESSAGE);

            } else {
                DBConnection.init();
                Connection c = DBConnection.getConnection();
                PreparedStatement ps;
                ResultSet rs;

                String timeStamp = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime());

                ps = c.prepareStatement("Select Amount,Fee_Charges_idFee_Charges,School_Year_idSchool_Year from billing where ReferenceNo='" + RefNo + "'");
                rs = ps.executeQuery();
                if (rs.next()) {
                    ps = c.prepareStatement("Insert into invoice (Value, Particulars, Category_of_charges_idCategory_of_charges, Student_Info_idStudent_Info, OrNum, DATE, School_Year_idSchool_Year, UseAccounts_idUseAccounts)values" + "('" + rs.getString(1) + "','" + RefNo + "','" + rs.getString(2) + "','" + Student_Id.getText() + "','" + String.format("%010d", OrNumber) + "','" + timeStamp + "','" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "','2')");
                    ps.execute();

                }
                Activity_log();
                OrNumber++;
                ORnum.setText("Official Receipt No:" + OrNumber);
                System.out.println(OrNumber);
                double change = Cash - Amount;
                JOptionPane.showMessageDialog(this, "Transaction Conmplete\n Change is:" + change);
                Amount = 0;
                partialPayMode = false;
            }

        } catch (Exception e) {
            System.out.println(e);
        }

    }

    void computePartialPayment() {
        try {

            if (OrNumber == 0) {
                JOptionPane.showMessageDialog(this, "Cannot proceed transaction OR number not set.");
            } else {
                {

                    if (partialPayMode) {
                        if (Cash >= partial_Amount) {
                            System.out.println("full payment on Balance:" + partial_Amount);
                            DBConnection.init();
                            Connection c = DBConnection.getConnection();
                            PreparedStatement ps;
                            ResultSet rs;

                            String timeStamp = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime());

                            ps = c.prepareStatement("Select Amount,Fee_Charges_idFee_Charges,School_Year_idSchool_Year from billing where ReferenceNo='" + RefNo + "'");
                            rs = ps.executeQuery();
                            if (rs.next()) {
                                ps = c.prepareStatement("Insert into invoice (Value, Particulars, Category_of_charges_idCategory_of_charges, Student_Info_idStudent_Info, OrNum, DATE, School_Year_idSchool_Year, UseAccounts_idUseAccounts)values" + "('" + partial_Amount + "','" + RefNo + "','" + rs.getString(2) + "','" + Student_Id.getText() + "','" + String.format("%010d", OrNumber) + "','" + timeStamp + "','" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "','" + User + "')");
                                ps.execute();

                            }
                            ORnum.setText("Official Receipt No:" + OrNumber);
                            System.out.println(OrNumber);
                            double Balance = 0;
                            double change = Cash - partial_Amount;
                            System.out.println("Cash Entered:" + Cash + " Balance is :" + Balance);
                            JOptionPane.showMessageDialog(this, "Transaction Conmplete\n Balance is:" + Balance + "\n Change is: " + change);
                            Amount = 0;
                            PrintReceibo(Student_Id.getText(), idSydisplay.get(SchoolYear.getSelectedIndex()));
                            Activity_log();
                            OrNumber++;

                        } else {
                            System.out.println("Partial payment on Balance:" + partial_Amount);
                            DBConnection.init();
                            Connection c = DBConnection.getConnection();
                            PreparedStatement ps;
                            ResultSet rs;

                            String timeStamp = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime());

                            ps = c.prepareStatement("Select Amount,Fee_Charges_idFee_Charges,School_Year_idSchool_Year from billing where ReferenceNo='" + RefNo + "'");
                            rs = ps.executeQuery();
                            if (rs.next()) {
                                ps = c.prepareStatement("Insert into invoice (Value, Particulars, Category_of_charges_idCategory_of_charges, Student_Info_idStudent_Info, OrNum, DATE, School_Year_idSchool_Year, UseAccounts_idUseAccounts)values" + "('" + Cash + "','" + RefNo + "','" + rs.getString(2) + "','" + Student_Id.getText() + "','" + String.format("%010d", OrNumber) + "','" + timeStamp + "','" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "','" + User + "')");
                                ps.execute();

                            }

                            ORnum.setText("Official Receipt No:" + OrNumber);
                            System.out.println(OrNumber);
                            double Balance = partial_Amount - Cash;
                            JOptionPane.showMessageDialog(this, "Transaction Conmplete\n Balance is:" + Balance);
                            Amount = 0;
                            System.out.println(Student_Id.getText());
                            System.out.println(SchoolYear.getSelectedItem());
                            PrintReceibo(Student_Id.getText(), idSydisplay.get(SchoolYear.getSelectedIndex()));
                            Activity_log();
                            OrNumber++;

                        }

                    }
                }
            }

        } catch (Exception e) {
            System.out.println(e);
        }

    }

    void LoadORNum() {
        try {

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("SELECT OrNum from invoice order by idINVOICE desc limit 1");
            rs = ps.executeQuery();
            while (rs.next()) {
                OrNumber = rs.getInt(1) + 1;
            }
            ORnum.setText("Official Receipt No." + String.format("%010d", OrNumber));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Please load Manually the OR number");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please load Manually the OR number");
        }

    }

    void load_running_Total() {
        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            String timeStamp = new SimpleDateFormat("yyyy-MM-dd").format(Calendar.getInstance().getTime());
            System.out.println("Today is :" + timeStamp);

            ps = c.prepareStatement("Select SUM(value) from invoice where Date like '" + timeStamp + "%" + "' and UseAccounts_idUseAccounts='" + User + "'");
            rs = ps.executeQuery();
            if (rs.next()) {
                System.out.println(rs.getDouble(1));
            }
            RuniingTotal.setText(df1.format(rs.getDouble(1)));

        } catch (SQLException ex) {

        }

    }

    void PrintCollectionReport() throws SQLException {
        try {
            JasperReport JR;
            JasperPrint JP;
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;

            // String Q="%"+this.txtSearch.getText() +"%";
            // String Source="C:\\Users\\JAMIEXXX3\\Documents\\NetBeansProjects\\Phonelist\\src\\Forms\\report1.jrxml";
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\Report_Invoice.jrxml");
            String Location = System.getProperty("user.dir") + "\\\\reports\\\\";
            String timeStamp = new SimpleDateFormat("yyyy-MM-dd%").format(Calendar.getInstance().getTime());
            String Date = new SimpleDateFormat("yyyy-MM-dd").format(Calendar.getInstance().getTime());
            String SQL = "Select *from Invoice where DATE like '" + timeStamp + "' and UseAccounts_idUseAccounts='" + User + "'";

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);

            HashMap m = new HashMap<>();

            ps = c.prepareStatement("SELECT * FROM useaccounts where idUseAccounts= '" + User + "'");
            rs = ps.executeQuery();
            if (rs.next()) {
                m.put("From", Date);
                m.put("To", rs.getString(3) + " " + rs.getString(4) + " " + rs.getString(5));
                m.put("SUBREPORT_DIR", Location);
                JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());

                JasperViewer.viewReport(JP, false);
            }

        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

    }

    void View_Total_Value() {

        double DAmount = 0;

        ArrayList<String> PartialPay = new ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {

            if (model.getValueAt(i, 7) != null) {

                PartialPay.add((String) model.getValueAt(i, 7));

            }

        }

        for (int i = 0; i < PartialPay.size(); i++) {
            DAmount = DAmount + Double.parseDouble(PartialPay.get(i));
            System.out.println("Amount Icrement:" + DAmount);
        }
        Amount = DAmount;
        AmountobePayed.setText(String.valueOf(df1.format(DAmount)));

    }

    void Compute_partialPay() {

        try {
            Amount = 0;
            ArrayList<String> RefNnumber = new ArrayList<>();
            ArrayList<String> PartialPay = new ArrayList<>();
            for (int i = 0; i < model.getRowCount(); i++) {

                if (model.getValueAt(i, 7) != null) {
                    RefNnumber.add((String) model.getValueAt(i, 1));
                    PartialPay.add((String) model.getValueAt(i, 7));
                    System.out.println(model.getValueAt(i, 7));
                    Many_partialPayment = true;
                }

            }

            for (int i = 0; i < PartialPay.size(); i++) {
                Amount = Amount + Double.parseDouble(PartialPay.get(i));
                System.out.println("Amount Icrement:" + Amount);
            }

            System.out.println("Many Partial Payments Selected Items " + RefNnumber);
            System.out.println("PArtial payment per Items +" + PartialPay);

            System.out.println("AMOUNTTTTTT: " + Amount);
            System.out.println("CASHHHHHH: " + Cash);

            AmountobePayed.setText(String.valueOf(df1.format(Amount)));

            if (OrNumber == 0) {
                JOptionPane.showMessageDialog(this, "Cannot proceed transaction OR number not set.");
            } else {

                if (Amount > Cash) {
                    JOptionPane.showMessageDialog(this, "Insuficient Cash", "Invalid Cash Input", JOptionPane.ERROR_MESSAGE);
                } else {
                    DBConnection.init();
                    Connection c = DBConnection.getConnection();
                    PreparedStatement ps;
                    ResultSet rs;

                    for (int i = 0; i < RefNnumber.size(); i++) {
                        String timeStamp = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime());

                        ps = c.prepareStatement("Select Amount,Fee_Charges_idFee_Charges,School_Year_idSchool_Year from billing where ReferenceNo='" + RefNnumber.get(i) + "'");
                        rs = ps.executeQuery();
                        if (rs.next()) {
                            ps = c.prepareStatement("Insert into invoice (Value, Particulars, Category_of_charges_idCategory_of_charges, Student_Info_idStudent_Info, OrNum, DATE, School_Year_idSchool_Year, UseAccounts_idUseAccounts)values" + "('" + PartialPay.get(i) + "','" + RefNnumber.get(i) + "','" + rs.getString(2) + "','" + Student_Id.getText() + "','" + String.format("%010d", OrNumber) + "','" + timeStamp + "','" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "','" + getUser() + "')");
                            ps.execute();

                        }

                    }

                    ORnum.setText("Official Receipt No:" + OrNumber);
                    System.out.println(OrNumber);
                    double change = Cash - Amount;
                    Change = change;
                    DecimalFormat d = new DecimalFormat("'P'0.00");
                    JOptionPane.showMessageDialog(this, "Transaction Conmplete\n Change is:" + d.format(change));
                    System.out.println(Student_Id.getText());
                    System.out.println(SchoolYear.getSelectedItem());
                    PrintReceibo(Student_Id.getText(), idSydisplay.get(SchoolYear.getSelectedIndex()));
                    Activity_log();
                    OrNumber++;
                    Amount = 0;
                    ResiboAMount = 0;
                }
            }

        } catch (Exception e) {
            System.out.println(e);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AmountobePayed;
    private javax.swing.JLabel GradeandSection;
    private javax.swing.JLabel Name;
    private javax.swing.JLabel ORnum;
    private javax.swing.JLabel Partial;
    private javax.swing.JButton Partial2;
    private javax.swing.JLabel RuniingTotal;
    private javax.swing.JComboBox<String> SchoolYear;
    private javax.swing.JLabel SelectedBills;
    private javax.swing.JTextField Student_Id;
    private javax.swing.JLabel Total;
    private javax.swing.JLabel Total1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the User
     */
    public int getUser() {
        return User;
    }

    /**
     * @param User the User to set
     */
    public void setUser(int User) {
        this.User = User;
    }
}
