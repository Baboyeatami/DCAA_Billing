/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dcaa_billing;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jamie Eduardo Rosal <Jamiewertalmighty@gmail.com>
 */
public class Add_Batch_to_BatchPayemnt extends javax.swing.JFrame {

    DefaultTableModel model = new DefaultTableModel();
    ArrayList<String> Sydisplay = new ArrayList<>();
    ArrayList<String> idSydisplay = new ArrayList<>();
    ArrayList<String> ChargeList = new ArrayList<>();
    DefaultComboBoxModel SYBoxModel;
    String SY_id;
    boolean batchpaaymentMode = false;
    Batch_Payment batch_Payment;
    JMenuItem Select = new JMenuItem("Select Charge");
    JPopupMenu menu = new JPopupMenu();
    String ReferenceNo;
    Payment_ORnum Datainpunt;
    Add_Batch_to_BatchPayemnt main;
    Batch_Payment main_L;
    String Student_Id;
    private static DecimalFormat df2 = new DecimalFormat("#,###.##");

    /**
     * Creates new form Add_Subsidy_Student
     */
    public Add_Batch_to_BatchPayemnt() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        load_SYandDepartments();
        main = this;
        Select.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ReferenceNo = model.getValueAt(jTable1.getSelectedRow(), 1).toString();

                if (Datainpunt == null) {
                    Datainpunt = new Payment_ORnum();
                    Datainpunt.set_reference(ReferenceNo);
                    Datainpunt.set_main(main);
                    Datainpunt.StudentID = Student_Id;

                    Datainpunt.setVisible(true);
                } else {
                    Datainpunt.set_main(main);
                    Datainpunt.set_reference(ReferenceNo);
                    Datainpunt.StudentID = Student_Id;
                    Datainpunt.setVisible(true);
                }

            }
        });
        menu.add(Select);
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    menu.show(e.getComponent(), e.getX(), e.getY());
                }
            }

        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        StudentId = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Name = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        SY = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        Search = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        Total = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select bill to batch payment");
        setBounds(new java.awt.Rectangle(306, 76, 0, 0));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Student ID:");

        StudentId.setText("jLabel2");

        jLabel3.setText("Name:");

        Name.setText("jLabel2");

        jLabel5.setText("School Year");

        SY.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        SY.setEnabled(false);

        jLabel2.setText("Search Reference No. ");

        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(StudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SY, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Search, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(StudentId)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Name)
                    .addComponent(SY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "DAte", "Reference Number", "Desciption", "Bill Amount", "Discount", "Balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(20);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setText("Total balance:");

        Total.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        Total.setText("jLabel7");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Total, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(Total))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        System.out.println(model.getValueAt(jTable1.getSelectedRow(), 1));
        ReferenceNo = model.getValueAt(jTable1.getSelectedRow(), 1).toString();
    }//GEN-LAST:event_jTable1MouseClicked

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        LoadSearch_Ref(Search.getText());
    }//GEN-LAST:event_SearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Add_Batch_to_BatchPayemnt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Add_Batch_to_BatchPayemnt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Add_Batch_to_BatchPayemnt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Add_Batch_to_BatchPayemnt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Add_Batch_to_BatchPayemnt().setVisible(true);
            }
        });
    }

    void loadStudent(String Id, String Name, String Sy) {
        System.out.println(Id);
        StudentId.setText(Id);
        Student_Id = Id;
        this.Name.setText(Name);
        System.out.println("SY_id Value:" + SY_id);
        System.out.println("Add Student Frame SY set to:" + SY_id);
        System.out.println("Add Student Frame SY set to index of:" + idSydisplay.indexOf(SY_id));
        //LoadBilling(Id, SY_id);
        displayPayedBills();
        SY.setSelectedIndex(idSydisplay.indexOf(SY_id));

    }

    void load_Student_batchPayment(String Id, String Name) {
        System.out.println(Id);
        StudentId.setText(Id);
        this.Name.setText(Name);
        System.out.println("SY_id Value:" + SY_id);
        //SY_id = subsidy_List.SY_ID;
        System.out.println("Add Student Frame SY set to:" + SY_id);
        System.out.println("Add Student Frame SY set to index of:" + idSydisplay.indexOf(SY_id));
        //LoadBilling(Id, SY_id);
        displayPayedBills();
        SY.setSelectedIndex(idSydisplay.indexOf(SY_id));

    }

    void LoadBilling(String Id, String Sy) {
        try {
            model.setRowCount(0);
            System.out.println(Sy + " School year");
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps, ps1, ps2;
            ResultSet rs, rs1, rs2;
            ps = c.prepareStatement("Select Bill_Date,ReferenceNo,Particulars,Amount,Discounts_idDiscounts,Fee_Charges_idFee_Charges from billing where Student_Info_idStudent_Info='" + Id + "' AND School_Year_idSchool_Year='" + Sy + "'");
            rs = ps.executeQuery();

            String discountDisplay = null;
            String display_Value = "";

            while (rs.next()) {
                if (rs.getString(5).equals("-1")) {
                    discountDisplay = "None";
                    display_Value = rs.getString(4);
                } else {
                    ps1 = c.prepareStatement("Select Value,Type from discounts where idDiscounts='" + rs.getString(5) + "'");
                    rs1 = ps1.executeQuery();
                    if (rs1.next()) {
                        if (rs1.getString(2).equals("0")) {
                            discountDisplay = rs1.getString(1) + "%";
                            ps2 = c.prepareStatement("Select Value from fee_charges where idFee_Charges='" + rs.getString(6) + "'");
                            rs2 = ps2.executeQuery();
                            if (rs2.next()) {
                                display_Value = rs2.getString(1);
                            }
                        } else {
                            discountDisplay = rs1.getString(1);
                            ps2 = c.prepareStatement("Select Value from fee_charges where idFee_Charges='" + rs.getString(6) + "'");
                            rs2 = ps2.executeQuery();
                            if (rs2.next()) {
                                display_Value = rs2.getString(1);
                            }

                        }

                    }

                }

                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), discountDisplay, display_Value});

            }
            rs.close();

            ps = c.prepareStatement("Select Sum(Amount) from billing where Student_Info_idStudent_Info='" + Id + "' AND School_Year_idSchool_Year='" + Sy + "'");
            rs = ps.executeQuery();

            if (rs.next()) {
                //double monthly=0;
                //monthly=Double.parseDouble(rs.getString(1))/10;
                Total.setText(rs.getString(1));
                //Monthly_instalment.setText(String.valueOf(monthly));
                //System.out.println(rs.getString(1));
                //  System.out.println(monthly);
            }

            rs.close();
            ps.close();
            SY.setSelectedIndex(idSydisplay.indexOf(Sy));
            Student_Id = Id;

        } catch (SQLException ex) {
            Logger.getLogger(StudentBill.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void displayPayedBills() {

        try {
            ArrayList<String> refno_from_Bill = new ArrayList<>();
            ArrayList<String> refno_from_Invoice = new ArrayList<>();

            ArrayList<String> current = new ArrayList<>();
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps, ps1, ps2, ps_invoice, ps_Sum;
            ResultSet rs, rs1, rs2, rs_invoice, rs_Sum;
            double monthly = 0, total = 0, balance = 0;

            ps = c.prepareStatement("Select ReferenceNo,Amount from billing where Student_Info_idStudent_Info='" + Student_Id + "' AND School_Year_idSchool_Year='" + String.valueOf(idSydisplay.get(SY.getSelectedIndex())) + "'");
            rs = ps.executeQuery();

            while (rs.next()) {
                System.out.println(rs.getString(1) + "Added to Bills");
                refno_from_Bill.add(rs.getString(1));

                ps_invoice = c.prepareStatement("Select Particulars,Sum(Value) from invoice where Student_Info_idStudent_Info='" + Student_Id + "' AND School_Year_idSchool_Year='" + String.valueOf(idSydisplay.get(SY.getSelectedIndex())) + "' AND Particulars='" + rs.getString(1) + "' ");
                rs_invoice = ps_invoice.executeQuery();

                while (rs_invoice.next()) {

                    if (rs.getString("ReferenceNo").equals(rs_invoice.getString("Particulars"))) {
                        System.out.println(rs.getDouble("Amount") + " AMount " + "Invoice " + rs_invoice.getDouble(2) + "on Reference no:" + rs.getString(1));
                        if (rs.getDouble("Amount") <= rs_invoice.getDouble(2)) {
                            System.out.println("Account paid on:" + rs.getString(1));
                            System.out.println(rs.getString(1) + " Added to Balance");
                            refno_from_Invoice.add(rs.getString(1));

                        } else {

                        }
                    }

                }
                rs_invoice.close();
            }

            refno_from_Bill.removeAll(refno_from_Invoice);
            current = refno_from_Bill;
            model.setRowCount(0);

            System.out.println(current.size() + "bill  Current size");
            for (int i = 0; i < current.size(); i++) {

                System.out.println(idSydisplay.get(SY.getSelectedIndex()) + " School year");
                System.out.println(current.get(i));
                ps = c.prepareStatement("Select Bill_Date,ReferenceNo,Particulars,Amount,Discounts_idDiscounts,Fee_Charges_idFee_Charges from billing where Student_Info_idStudent_Info='" + Student_Id + "' AND School_Year_idSchool_Year='" + String.valueOf(idSydisplay.get(SY.getSelectedIndex())) + "' AND ReferenceNo='" + current.get(i) + "'");
                rs = ps.executeQuery();

                String discountDisplay = null;
                String display_Value = "";

                while (rs.next()) {

                    if (rs.getString(5).equals("-1")) {
                        discountDisplay = "None";
                        display_Value = rs.getString(4);
                    } else {
                        ps1 = c.prepareStatement("Select Value,type from discounts where idDiscounts='" + rs.getString(5) + "'");
                        rs1 = ps1.executeQuery();
                        if (rs1.next()) {
                            System.out.println(rs1.getString(2) + " Discount Type");
                            if (rs1.getString(2).equals("1")) {
                                discountDisplay = rs1.getString(1);
                                ps2 = c.prepareStatement("Select Value from fee_charges where idFee_Charges='" + rs.getString(6) + "'");
                                rs2 = ps2.executeQuery();
                                if (rs2.next()) {
                                    display_Value = rs2.getString(1);
                                }

                            } else {
                                discountDisplay = rs1.getString(1) + "%";
                                ps2 = c.prepareStatement("Select Value from fee_charges where idFee_Charges='" + rs.getString(6) + "'");
                                rs2 = ps2.executeQuery();
                                if (rs2.next()) {
                                    display_Value = rs2.getString(1);
                                }

                            }
                        }

                    }

                    ps_invoice = c.prepareStatement("Select Particulars,Sum(Value) from invoice where Student_Info_idStudent_Info='" + Student_Id + "' AND School_Year_idSchool_Year='" + String.valueOf(idSydisplay.get(SY.getSelectedIndex())) + "' ANd particulars='" + current.get(i) + "' ");
                    rs_invoice = ps_invoice.executeQuery();

                    while (rs_invoice.next()) {
                        System.out.println(rs.getString("ReferenceNo") + " " + rs_invoice.getString("Particulars"));
                        System.out.println(rs.getDouble("Amount") + " " + rs_invoice.getDouble("sum(Value)"));

                        balance = rs.getDouble("Amount") - rs_invoice.getDouble(2);
                        System.out.println("Balance on:" + rs.getString("ReferenceNo") + " is:" + balance);

                    }

                    model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), display_Value, discountDisplay, balance});

                    total = total + balance;
                    balance = 0;

                }
                rs.close();

                //monthly=total/10;
                Total.setText(String.valueOf(df2.format(total)));
                // Monthly_intallment.setText(String.valueOf(monthly));
                //System.out.println("Monthly Installment:" + monthly);

            }
            double bill = 0;
            double payed = 0;
            ps = c.prepareStatement("SELECT  SUM(Amount) FROM dcaa_databse.billing where Student_Info_idStudent_Info='" + Student_Id + "' and School_Year_idSchool_Year='" + SY_id + "'; ");
            rs = ps.executeQuery();
            if (rs.next()) {
                bill = rs.getDouble(1);
                System.out.print("Bill for " + SY_id + ": " + bill + " ");
            }

            ps = c.prepareStatement("SELECT SUM(Value) FROM dcaa_databse.invoice where Student_Info_idStudent_Info='" + Student_Id + "' and School_Year_idSchool_Year='" + SY_id + "'");
            rs = ps.executeQuery();
            if (rs.next()) {
                payed = rs.getDouble(1);
                System.out.print("Payed:" + payed + " ");
            }

            System.out.println(refno_from_Bill);
            System.out.println(refno_from_Invoice);
            System.out.println("Current bill " + current);
            refno_from_Bill.clear();
            refno_from_Invoice.clear();
            current.clear();

            Total.setText(df2.format(bill - payed));
            bill = 0;
            payed = 0;

        } catch (SQLException ex) {
            Logger.getLogger(Invoice.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void LoadSearch_Ref(String Ref) {
        try {
            model.setRowCount(0);

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps, ps1, ps2;
            ResultSet rs, rs1, rs2;
            ps = c.prepareStatement("Select Bill_Date,ReferenceNo,Particulars,Amount,Discounts_idDiscounts,Fee_Charges_idFee_Charges from billing where ReferenceNo='" + Ref + "'");
            rs = ps.executeQuery();

            String discountDisplay = null;
            String display_Value = "";

            while (rs.next()) {
                if (rs.getString(5).equals("-1")) {
                    discountDisplay = "None";
                    display_Value = rs.getString(4);
                } else {
                    ps1 = c.prepareStatement("Select Value,Type from discounts where idDiscounts='" + rs.getString(5) + "'");
                    rs1 = ps1.executeQuery();
                    if (rs1.next()) {
                        if (rs1.getString(2).equals("0")) {
                            discountDisplay = rs1.getString(1) + "%";
                            ps2 = c.prepareStatement("Select Value from fee_charges where idFee_Charges='" + rs.getString(6) + "'");
                            rs2 = ps2.executeQuery();
                            if (rs2.next()) {
                                display_Value = rs2.getString(1);
                            }
                        } else {
                            discountDisplay = rs1.getString(1);
                            ps2 = c.prepareStatement("Select Value from fee_charges where idFee_Charges='" + rs.getString(6) + "'");
                            rs2 = ps2.executeQuery();
                            if (rs2.next()) {
                                display_Value = rs2.getString(1);
                            }

                        }

                    }

                }

                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), display_Value, discountDisplay, rs.getString(4)});

            }
            rs.close();

        } catch (SQLException ex) {
            Logger.getLogger(StudentBill.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void load_SYandDepartments() {

        try {

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;
            ps = c.prepareStatement("Select idschool_year,School_Year,Semester from school_year");
            rs = ps.executeQuery();
            while (rs.next()) {
                Sydisplay.add(rs.getString(2) + "-" + rs.getString(3));
                idSydisplay.add(rs.getString(1));
            }
            rs.close();
            SYBoxModel = new DefaultComboBoxModel(Sydisplay.toArray());
            SY.setModel(SYBoxModel);

        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }

    void getSelectedFees() {
        ArrayList<String> Selectedfee = new ArrayList();

        System.out.println("Model Row Count:" + model.getRowCount());
        for (int i = 0; i < model.getRowCount(); i++) {

            boolean selected = (boolean) model.getValueAt(i, 6);
            System.out.println("Selected row:" + i + " " + selected);

            if (selected) {
                Selectedfee.add((String) model.getValueAt(i, 1));
            }
        }

        System.out.println(Selectedfee);

    }

    void set_BatchPayment(Batch_Payment cc) {
        batch_Payment = cc;
        SY_id = batch_Payment.SY_id;
        System.out.println("Add Student Frame SY set to:" + SY_id);
        SY.setSelectedIndex(idSydisplay.indexOf(SY_id));

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Name;
    private javax.swing.JComboBox<String> SY;
    private javax.swing.JTextField Search;
    private javax.swing.JLabel StudentId;
    private javax.swing.JLabel Total;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
