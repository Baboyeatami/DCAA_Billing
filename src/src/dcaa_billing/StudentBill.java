/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dcaa_billing;

import com.mysql.cj.protocol.Resultset;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Jamie Eduardo Rosal <Jamiewertalmighty@gmail.com>
 */
public class StudentBill extends javax.swing.JFrame {

    boolean Casher = false;
    String ID = null, idSY = null;
    int count;
    DefaultComboBoxModel SYBoxModel;
    DefaultTableModel model = new DefaultTableModel();
    ArrayList<String> Sydisplay = new ArrayList<>();
    ArrayList<String> idSydisplay = new ArrayList<>();
    ArrayList<String> ChargeList = new ArrayList<>();
    String RefNo = null;
    Select_Discount discounts = null;
    String discountID = null;
    double Discount = 0, Value = 0, DiscountedValue, DisplayValue = 0;
    int discounttype;
    JMenuItem addDiscount = new JMenuItem("Add Discount");
    JMenuItem RemoveCharge = new JMenuItem("Remove Charge");
    JPopupMenu menu = new JPopupMenu();
    StudentBill bill = this;
    public String UserId;
    private static DecimalFormat df1 = new DecimalFormat("#,###.##");

    /**
     * Creates new form StudentBill
     */
    public StudentBill() {

        initComponents();
        load_SYandDepartments();
        model = (DefaultTableModel) jTable1.getModel();
        System.out.println(ID + " " + idSydisplay.get(SchoolYear.getSelectedIndex()) + " Load billing details");

        addDiscount.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (discounts == null) {
                    discounts = new Select_Discount();
                    discounts.setStudentBill(bill);
                    discounts.setVisible(true);
                }
                discounts.setVisible(true);

            }
        });

        RemoveCharge.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (RefNo == null || RefNo.equals("")) {
                    JOptionPane.showMessageDialog(bill, "No charge selected!", "CHARGE UPDATE", JOptionPane.INFORMATION_MESSAGE);

                } else {
                    int A = JOptionPane.showOptionDialog(bill, "Do you want to remove this charge?", "CHARGE UPDATE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, DisplayValue);

                    if (A == 0) {
                        Remove_Charge();
                        LoadBilling(bill.ID, String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())));

                    }

                }
            }
        });

        menu.add(addDiscount);
        menu.add(RemoveCharge);

        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    menu.show(e.getComponent(), e.getX(), e.getY());
                }
            }

        });

    }

    /**
     * s
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        SQNo = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        grade = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        StudentID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        StudentName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        Total = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        SchoolYear = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Billing  Statements ");
        setBackground(new java.awt.Color(0, 153, 102));
        setBounds(new java.awt.Rectangle(163, 93, 0, 0));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel25.setBackground(new java.awt.Color(255, 255, 255));
        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("DIGOS CENTRAL ADVENTIST ACADEMY");
        jPanel1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 330, 20));

        jLabel22.setBackground(new java.awt.Color(255, 255, 255));
        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Lapu-lapu St., Zone III, Digos City");
        jPanel1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 30, 310, 20));

        jLabel24.setBackground(new java.awt.Color(255, 255, 255));
        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("BILLING");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, 120, 20));

        SQNo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        SQNo.setForeground(new java.awt.Color(255, 255, 255));
        SQNo.setText("Student ID:");
        jPanel1.add(SQNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 250, 20));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Student Name:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, 20));

        grade.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        grade.setForeground(new java.awt.Color(255, 255, 255));
        grade.setText("*****");
        jPanel1.add(grade, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 90, 420, 20));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("School Year:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 120, 110, 30));

        StudentID.setBackground(new java.awt.Color(204, 204, 204));
        StudentID.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        StudentID.setForeground(new java.awt.Color(0, 0, 0));
        StudentID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        StudentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudentIDActionPerformed(evt);
            }
        });
        jPanel1.add(StudentID, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 170, -1));

        jTable1.setBackground(new java.awt.Color(204, 204, 204));
        jTable1.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "DATE", "REFERENCE NO. ", "DESCRIPTION", "AMOUNT", "DISCOUNT", "SUB TOTAL"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 1050, 220));

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setText("Add Charges");
        jButton5.setActionCommand("Add");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 450, 140, 30));

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton6.setText("Remove Charge");
        jButton6.setActionCommand("Add");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 450, -1, 30));

        StudentName.setBackground(new java.awt.Color(204, 204, 204));
        StudentName.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        StudentName.setForeground(new java.awt.Color(0, 0, 0));
        StudentName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(StudentName, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 440, -1));

        jLabel10.setBackground(new java.awt.Color(102, 102, 102));
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Total Bill:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, 90, 20));

        Total.setEditable(false);
        Total.setBackground(new java.awt.Color(204, 204, 204));
        Total.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Total.setForeground(new java.awt.Color(0, 0, 0));
        Total.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(Total, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 400, 290, 40));

        jButton7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton7.setText("Add Discount");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 450, -1, -1));

        SchoolYear.setBackground(new java.awt.Color(204, 204, 204));
        SchoolYear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SchoolYear.setForeground(new java.awt.Color(0, 0, 0));
        SchoolYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2018-2019" }));
        SchoolYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SchoolYearItemStateChanged(evt);
            }
        });
        SchoolYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SchoolYearActionPerformed(evt);
            }
        });
        jPanel1.add(SchoolYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 120, 180, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Student ID:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, -1, 20));

        jButton8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton8.setText("Load Bill");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 110, -1));

        jButton1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton1.setText("Print Bill");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 450, 130, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Grade :");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 90, 50, 20));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 1070, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Charge_list charge_list = null;
        if (charge_list == null) {
            charge_list = new Charge_list();
            charge_list.setStudentBill(this);
            charge_list.setVisible(true);

        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        if (RefNo == null || RefNo.equals("")) {
            JOptionPane.showMessageDialog(this, "No charge selected!", "CHARGE UPDATE", JOptionPane.INFORMATION_MESSAGE);

        } else {
            int A = JOptionPane.showOptionDialog(this, "Do you want to remove this charge?", "CHARGE UPDATE", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, DisplayValue);

            if (A == 0) {
                Remove_Charge();
                LoadBilling(this.ID, String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())));

            }

        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void SchoolYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SchoolYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SchoolYearActionPerformed

    private void StudentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudentIDActionPerformed
        // TODO add your handling code here:
        set_ID(StudentID.getText());
    }//GEN-LAST:event_StudentIDActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (discounts == null) {
            discounts = new Select_Discount();
            discounts.setStudentBill(this);
            discounts.setVisible(true);
        }
        discounts.setVisible(true);

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        LoadBilling(StudentID.getText(), String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())));
        if (discounts != null) {
            discounts.dispose();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        System.out.println(String.valueOf(model.getValueAt(jTable1.getSelectedRow(), 1)));
        RefNo = String.valueOf(model.getValueAt(jTable1.getSelectedRow(), 1));

    }//GEN-LAST:event_jTable1MouseClicked

    private void SchoolYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SchoolYearItemStateChanged
        // TODO add your handling code here:
        System.out.println("Change SY load bill");
        // LoadBilling(StudentID.getText(), String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())));

    }//GEN-LAST:event_SchoolYearItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        PrintBill(StudentID.getText(), String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())));
    }//GEN-LAST:event_jButton1ActionPerformed

    /*
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentBill().setVisible(true);
            }
        });
    }

    void set_ID(String id) {
        try {
            ID = id;
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select idStudent_Info,id,F_name,M_name,L_name,GradeLevel,Status from student_info where id='" + id + "'");
            rs = ps.executeQuery();
            if (rs.next()) {
                SQNo.setText(rs.getString(1));
                StudentID.setText(rs.getString(2));
                StudentName.setText(rs.getString(5) + ", " + rs.getString(3) + " " + rs.getString(4));
                grade.setText(rs.getString("GradeLevel") + "  Status: " + rs.getString("Status"));
                ID = rs.getString(2);

                System.out.println(ID + "bill id");
            }

            LoadBilling(this.ID, String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())));
            ps.close();
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(StudentBill.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void Set_casherMode(boolean mode) {
        if (mode) {
            menu.remove(addDiscount);
            jButton7.setEnabled(false);
        }

    }

    void set_ID(String id, String Sy) {
        try {
            ID = id;
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select idStudent_Info,id,F_name,M_name,L_name,GradeLevel,Status from student_info where id='" + id + "'");
            rs = ps.executeQuery();
            if (rs.next()) {
                SQNo.setText(rs.getString(1));
                StudentID.setText(rs.getString(2));
                StudentName.setText(rs.getString(3) + " " + rs.getString(4) + " " + rs.getString(5));
                grade.setText(rs.getString("GradeLevel") + "  Status: " + rs.getString("Status"));
                ID = rs.getString(2);

                System.out.println(ID + "bill id");
            }

            SchoolYear.setSelectedIndex(idSydisplay.indexOf(Integer.parseInt(Sy)));

            LoadBilling(id, Sy);

        } catch (SQLException ex) {
            Logger.getLogger(StudentBill.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void Remove_Charge() {
        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;

            ps = c.prepareStatement("Update billing set Student_Info_idStudent_Info='" + 00000000000 + "',Amount='" + 0 + "' where ReferenceNo='" + RefNo + "'");
            ps.execute();
            JOptionPane.showMessageDialog(this, "Charge Removed!", "Update Chares", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException ex) {
            Logger.getLogger(StudentBill.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void load_SYandDepartments() {

        try {

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;
            ps = c.prepareStatement("Select idschool_year,School_Year,Semester from school_year");
            rs = ps.executeQuery();
            while (rs.next()) {
                Sydisplay.add(rs.getString(2) + "-" + rs.getString(3));
                idSydisplay.add(rs.getString(1));
            }
            rs.close();
            SYBoxModel = new DefaultComboBoxModel(Sydisplay.toArray());
            SchoolYear.setModel(SYBoxModel);

        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }

    public void setChargelist(ArrayList<String> a) {
        try {

            ChargeList = a;
            System.out.println(ChargeList);
            for (int i = 0; i < ChargeList.size(); i++) {
                System.out.println(ChargeList.indexOf(i));
            }
            System.out.println(ID);
            System.out.println(idSydisplay.get(SchoolYear.getSelectedIndex()) + "index of sy arraylist");

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps, ps2;
            ResultSet rs = null, rs1 = null;
            Calendar cal = Calendar.getInstance();
            cal.getTime();
            SimpleDateFormat date2 = new SimpleDateFormat("yyyy/MM/d");
            SimpleDateFormat time = new SimpleDateFormat("hh:mm:ss");

            String Date = date2.format(cal.getTime());
            String Time = time.format(cal.getTime());

            SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/d");
            String timeStamp = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime());
            df = new SimpleDateFormat("yyyy/MM/d");

            String generatedReFNo = null;
            for (int i = 0; i < ChargeList.size(); i++) {
                ps = c.prepareStatement("Select idFee_Charges, Fee_Name, Description, Value, Category_of_charges from fee_charges where idFee_Charges='" + ChargeList.get(i) + "'");
                rs = ps.executeQuery();

                ps2 = c.prepareStatement("SELECT  count(idBilling) FROM billing");
                rs1 = ps2.executeQuery();

                if (rs1.next()) {
                    count = Integer.parseInt(rs1.getString(1));
                    generatedReFNo = "1" + String.format("%010d", count + 1);
                }

                if (rs.next()) {
                    ps = c.prepareStatement("Insert into billing (Student_Info_idStudent_Info, School_Year_idSchool_Year, Fee_Charges_idFee_Charges, Bill_Date, Discounts_idDiscounts, Particulars, Amount, ReferenceNo, dateCreated, UseAccounts_idUseAccounts)values" + "('" + ID + "','" + String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())) + "','" + ChargeList.get(i) + "','" + Date + "','" + -1 + "','" + rs.getString(2) + "','" + rs.getString(4) + "','" + generatedReFNo + "','" + timeStamp + "','" + UserId + "')");
                    ps.execute();
                    System.out.println("i" + i);
                }

            }

        } catch (SQLException e) {
            System.out.println(e);
        }

    }

    void LoadBilling(String Id, String Sy) {
        try {
            model.setRowCount(0);
            System.out.println(Sy + " School year");
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps, ps1, ps2;
            ResultSet rs, rs1, rs2;
            ps = c.prepareStatement("Select Bill_Date,ReferenceNo,Particulars,Amount,Discounts_idDiscounts,Fee_Charges_idFee_Charges from billing where Student_Info_idStudent_Info='" + Id + "' AND School_Year_idSchool_Year='" + Sy + "'");
            rs = ps.executeQuery();

            String discountDisplay = null;
            String display_Value = "";

            while (rs.next()) {
                if (rs.getString(5).equals("-1")) {
                    discountDisplay = "None";
                    display_Value = rs.getString(4);
                } else {
                    ps1 = c.prepareStatement("Select Discount_Name,Type from discounts where idDiscounts='" + rs.getString(5) + "'");
                    rs1 = ps1.executeQuery();
                    if (rs1.next()) {
                        if (rs1.getString(2).equals("0")) {
                            discountDisplay = rs1.getString(1) + "%";
                            ps2 = c.prepareStatement("Select Value from fee_charges where idFee_Charges='" + rs.getString(6) + "'");
                            rs2 = ps2.executeQuery();
                            if (rs2.next()) {
                                display_Value = rs2.getString(1);
                            }
                        } else {
                            discountDisplay = rs1.getString(1);
                            ps2 = c.prepareStatement("Select Value from fee_charges where idFee_Charges='" + rs.getString(6) + "'");
                            rs2 = ps2.executeQuery();
                            if (rs2.next()) {
                                display_Value = rs2.getString(1);
                            }

                        }

                    }

                }

                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), display_Value, discountDisplay, rs.getString(4)});

            }
            rs.close();

            ps = c.prepareStatement("Select Sum(Amount) from billing where Student_Info_idStudent_Info='" + Id + "' AND School_Year_idSchool_Year='" + Sy + "'");
            rs = ps.executeQuery();

            if (rs.next()) {
                //double monthly=0;
                //monthly=Double.parseDouble(rs.getString(1))/10;
                Total.setText(df1.format(rs.getDouble(1)));
                //Monthly_instalment.setText(String.valueOf(monthly));
                //System.out.println(rs.getString(1));
                //  System.out.println(monthly);
            }

            rs.close();
            ps.close();
            SchoolYear.setSelectedIndex(idSydisplay.indexOf(Sy));

        } catch (SQLException ex) {
            Logger.getLogger(StudentBill.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void Computediscount() {
        try {
            DBConnection.init();
            Connection ccConnection = DBConnection.getConnection();
            PreparedStatement psCheck;
            ResultSet rsCheck;
            psCheck = ccConnection.prepareStatement("Select Discounts_idDiscounts from billing where ReferenceNo=" + RefNo + "");
            rsCheck = psCheck.executeQuery();
            if (rsCheck.next()) {
                if (rsCheck.getString(1).equals("-1")) {

                    int conti = JOptionPane.showConfirmDialog(this, "Bill with Referenceno " + RefNo + " will be discounted with discount Id: " + discountID + " \nDo you want to continue? ");

                    if (conti == 0) {
                        DBConnection.init();
                        Connection c = DBConnection.getConnection();
                        PreparedStatement ps;
                        ResultSet rs;
                        ps = c.prepareStatement("Select Value,Type from discounts where idDiscounts='" + discountID + "'");
                        rs = ps.executeQuery();
                        if (rs.next()) {
                            Discount = Double.parseDouble(rs.getString(1));
                            System.out.println(Discount + "Discount id");
                            discounttype = rs.getInt(2);
                            System.out.println(discounttype + " discount type");

                        }
                        rs.close();
                        ps = c.prepareStatement("Select Amount from Billing where ReferenceNo='" + RefNo + "'");
                        rs = ps.executeQuery();
                        if (rs.next()) {
                            Value = Double.parseDouble(rs.getString(1));
                            System.out.println(Value + "value on Refference no.");
                        }

                        if (discounttype == 0) {
                            DiscountedValue = (Discount * 0.01 * Value);
                            Value = Value - DiscountedValue;
                            System.out.println(Value);
                            rs.close();

                            ps = c.prepareStatement("Update Billing Set Amount='" + Value + "',Discounts_idDiscounts='" + discountID + "' Where ReferenceNo='" + RefNo + "'");
                            ps.execute();
                            System.out.println("discount updated");
                            JOptionPane.showMessageDialog(this, "Bill with Reference no " + RefNo + " updated!\nDiscounted Amount:" + Value + "");
                        } else if (discounttype == 1) {

                            Value = Value - Discount;
                            System.out.println(Value);
                            rs.close();

                            ps = c.prepareStatement("Update Billing Set Amount='" + Value + "',Discounts_idDiscounts='" + discountID + "' Where ReferenceNo='" + RefNo + "'");
                            ps.execute();
                            System.out.println("discount updated");
                            JOptionPane.showMessageDialog(this, "Bill with Reference no " + RefNo + " updated!\nDiscounted Amount:" + Value + "");

                        }

                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Charge is already discounted");
                    discounts.dispose();

                }
            }

        } catch (SQLException ex) {
            System.out.println(ex);
        }

    }

    void RefreshBill() {
        LoadBilling(StudentID.getText(), String.valueOf(idSydisplay.get(SchoolYear.getSelectedIndex())));

    }

    void RefreshBill(String id, String Sy) {
        LoadBilling(id, Sy);

    }

    void PrintBill(String Id, String Sy) {
        try {
            JasperReport JR;
            JasperPrint JP;

            // String Q="%"+this.txtSearch.getText() +"%";
            // String Source="C:\\Users\\JAMIEXXX3\\Documents\\NetBeansProjects\\Phonelist\\src\\Forms\\report1.jrxml";
            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\Student_Bill.jrxml");

            String SQL = "Select * from billing where Student_Info_idStudent_Info='" + Id + "' AND School_Year_idSchool_Year='" + Sy + "'";

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);

            // m.put("parameter1", "   Covered Period: "+dateF+"  to  "+dateT);
            HashMap m = new HashMap<>();
            // String pr = JOptionPane.showInputD.ialog("Enter :");
            //String pn = JOptionPane.showInputDialog("Enter Noted By:");
            m.put("Full_Name", StudentName.getText() + "   Grade Level:" + grade.getText());
            m.put("SY", SchoolYear.getSelectedItem().toString());

            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());

            JasperViewer.viewReport(JP, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SQNo;
    private javax.swing.JComboBox<String> SchoolYear;
    private javax.swing.JTextField StudentID;
    private javax.swing.JTextField StudentName;
    private javax.swing.JTextField Total;
    private javax.swing.JLabel grade;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    public javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
