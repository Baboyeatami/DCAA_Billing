/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dcaa_billing;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Jamie Eduardo Rosal <Jamiewertalmighty@gmail.com>
 */
public class Accounting extends javax.swing.JFrame {

    ArrayList<String> IdDepartment = new ArrayList<>();
    ArrayList<String> Display_Department = new ArrayList<>();
    ArrayList<String> Sydisplay = new ArrayList<>();
    ArrayList<String> idSydisplay = new ArrayList<>();
    DefaultComboBoxModel combomodel;
    DefaultComboBoxModel SYBoxModel;
    DefaultTableModel model1 = new DefaultTableModel();
    DefaultTableModel model2 = new DefaultTableModel();
    String categoryid;
    double Category_invoiceValue;
    Recivables ARecivables;
    Subsidy suibSubsidy;
    String USer_id;
    private static DecimalFormat df1 = new DecimalFormat("#,###.##");

    /**
     * Creates new form Charges_radiobox
     */
    public Accounting() {
        initComponents();
        Load_departments();
        load_SY();

        model1 = (DefaultTableModel) jTable1.getModel();
        model2 = (DefaultTableModel) jTable2.getModel();
        load_Invoice();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        SearchCrteria = new javax.swing.JComboBox<>();
        SearchKey = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        DepartmentCombobox = new javax.swing.JComboBox<>();
        To_date = new com.toedter.calendar.JDateChooser();
        SchoolYCombobox1 = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Category_invoice = new javax.swing.JLabel();
        Category_selected1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        StudentJournal = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(98, 25, 0, 0));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setForeground(new java.awt.Color(204, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(102, 102, 102));
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("SEARCH");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 13, -1, -1));

        SearchCrteria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Reference No", "Student Id", "OR No." }));
        jPanel1.add(SearchCrteria, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 152, -1));

        SearchKey.setForeground(new java.awt.Color(0, 0, 0));
        SearchKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchKeyActionPerformed(evt);
            }
        });
        jPanel1.add(SearchKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 199, -1));

        jLabel3.setBackground(new java.awt.Color(102, 102, 102));
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("From:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, -1, 30));

        jLabel4.setBackground(new java.awt.Color(102, 102, 102));
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("To:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, 31, 30));

        jLabel8.setBackground(new java.awt.Color(102, 102, 102));
        jLabel8.setForeground(new java.awt.Color(204, 204, 204));
        jLabel8.setText("School Year:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 40, -1, 20));

        DepartmentCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DepartmentCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DepartmentComboboxItemStateChanged(evt);
            }
        });
        jPanel1.add(DepartmentCombobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 10, 200, -1));

        To_date.setForeground(new java.awt.Color(204, 204, 204));
        To_date.setDateFormatString("MMMM- d- yyyy");
        jPanel1.add(To_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, 180, -1));

        SchoolYCombobox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        SchoolYCombobox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SchoolYCombobox1ActionPerformed(evt);
            }
        });
        jPanel1.add(SchoolYCombobox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 40, 200, -1));

        jLabel9.setBackground(new java.awt.Color(102, 102, 102));
        jLabel9.setForeground(new java.awt.Color(204, 204, 204));
        jLabel9.setText("Department:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 10, -1, 20));

        jDateChooser1.setForeground(new java.awt.Color(204, 204, 204));
        jDateChooser1.setDateFormatString("MMMM-dd-yyyy");
        jPanel1.add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 160, -1));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setForeground(new java.awt.Color(204, 204, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setBackground(new java.awt.Color(255, 255, 255));
        jTable1.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 34, 199, 330));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Category");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 91, -1));

        jTable2.setBackground(new java.awt.Color(255, 255, 255));
        jTable2.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jTable2.setForeground(new java.awt.Color(51, 51, 51));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Category", "Reference No.", "Student ID", "OR No.", "Value", "Grade Level"
            }
        ));
        jTable2.setMaximumSize(new java.awt.Dimension(2147483647, 90));
        jScrollPane2.setViewportView(jTable2);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 34, 870, 330));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Total Invoice:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 370, -1, -1));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("jLabel6");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 370, 300, -1));

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Department Invoice Report");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(518, 10, 270, 20));

        Category_invoice.setBackground(new java.awt.Color(255, 255, 255));
        Category_invoice.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Category_invoice.setForeground(new java.awt.Color(255, 255, 255));
        Category_invoice.setText("Category:");
        jPanel2.add(Category_invoice, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 370, 300, 30));

        Category_selected1.setBackground(new java.awt.Color(255, 255, 255));
        Category_selected1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Category_selected1.setForeground(new java.awt.Color(255, 255, 255));
        Category_selected1.setText("Category:");
        jPanel2.add(Category_selected1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 200, 30));

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new java.awt.GridLayout());

        jButton1.setText("Load");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1);

        jButton3.setText("Load Category");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton3);

        jButton4.setText("Print Report");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4);

        jButton8.setText(" Discounts");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton8);

        jButton5.setText(" Receivables");
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton5);

        jButton6.setText("Subsidy");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton6);

        jButton7.setText("Refresh Invoice");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton7);

        StudentJournal.setText("Student Journal");
        StudentJournal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudentJournalActionPerformed(evt);
            }
        });
        jPanel3.add(StudentJournal);

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1089, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.out.println(getBounds());
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void SchoolYCombobox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SchoolYCombobox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SchoolYCombobox1ActionPerformed

    private void DepartmentComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DepartmentComboboxItemStateChanged
        // TODO add your handling code here:
        load_Departments_Category();

    }//GEN-LAST:event_DepartmentComboboxItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        if (jDateChooser1.getDate() == null || To_date.getDate() == null) {
            JOptionPane.showMessageDialog(this, "No Date Selected", "Invalid Date", JOptionPane.INFORMATION_MESSAGE);
        } else {

            String from = sdf.format(jDateChooser1.getDate());
            String Todate = sdf.format(To_date.getDate());

            System.out.println(from);
            System.out.println(Todate);
            load_InvoiceDate(from, Todate);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        categoryid = (String) model1.getValueAt(jTable1.getSelectedRow(), 0);
        System.out.println(model1.getValueAt(jTable1.getSelectedRow(), 0));
        Category_selected1.setText(categoryid + " " + model1.getValueAt(jTable1.getSelectedRow(), 1).toString());

    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        if (jDateChooser1.getDate() == null || To_date.getDate() == null) {
            JOptionPane.showMessageDialog(this, "No Date Selected", "Invalid Date", JOptionPane.INFORMATION_MESSAGE);
        } else if (categoryid == null || categoryid == "") {
            JOptionPane.showMessageDialog(this, "No Category selected", "Invalid category", JOptionPane.INFORMATION_MESSAGE);
        } else {

            String from = sdf.format(jDateChooser1.getDate());
            String Todate = sdf.format(To_date.getDate());

            System.out.println(from);
            System.out.println(Todate);
            load_InvoiceDate_Category(from, Todate);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            // TODO add your handling code here:
            PrintReport();
        } catch (IOException ex) {
            Logger.getLogger(Accounting.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if (ARecivables == null) {
            ARecivables = new Recivables();
            ARecivables.setVisible(true);
        } else {
            ARecivables.setVisible(true);
            ARecivables.setAlwaysOnTop(true);

        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        if (suibSubsidy == null) {
            suibSubsidy = new Subsidy();
            suibSubsidy.USer_id = USer_id;
            suibSubsidy.setVisible(true);
        } else {
            suibSubsidy.USer_id = USer_id;
            suibSubsidy.setVisible(true);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        load_Invoice();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void StudentJournalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudentJournalActionPerformed
        try {
            try {
                PrintReportStudentJournal();
            } catch (IOException ex) {
                Logger.getLogger(Accounting.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Accounting.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_StudentJournalActionPerformed

    private void SearchKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchKeyActionPerformed
        // System.out.println(SearchKey.getText());
        // String SearchKey = String.format("%010d", Integer.parseInt(this.SearchKey.getText()));
        //// System.out.println(SearchKey);
        // System.out.println("Search OR number" + SearchKey);
        // Search_Invoice_OR(SearchKey);
        Search_Data();
        System.out.println("Search Data:");
    }//GEN-LAST:event_SearchKeyActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        if (ARecivables == null) {
            ARecivables = new Recivables();
            ARecivables.setVisible(true);
        } else {
            ARecivables.setVisible(true);
            ARecivables.setAlwaysOnTop(true);

        }
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Accounting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Accounting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Accounting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Accounting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Accounting().setVisible(true);
            }
        });
    }

    void PrintReport() throws IOException {
        try {
            JasperReport JR;
            JasperPrint JP;
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            // String Q="%"+this.txtSearch.getText() +"%";
            // String Source="C:\\Users\\JAMIEXXX3\\Documents\\NetBeansProjects\\Phonelist\\src\\Forms\\report1.jrxml";
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\Report_Invoice.jrxml");
            String Location = System.getProperty("user.dir") + "\\\\reports\\\\";
            String from = sdf.format(jDateChooser1.getDate());
            String Todate = sdf.format(To_date.getDate());
            String SQL = "Select * from Invoice where Date  BETWEEN '" + from + "' AND '" + Todate + "'";

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);

            HashMap m = new HashMap<>();

            m.put("From", from);
            m.put("To", Todate);
            m.put("SUBREPORT_DIR", Location);
            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());

            JasperViewer.viewReport(JP, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

    }

    void PrintReportStudentJournal() throws SQLException, IOException {
        try {
            JasperReport JR;
            JasperPrint JP;

            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\ChargesBilled_1.jrxml");
            System.out.println(System.getProperty("user.dir") + "\\\\reports\\\\ChargesBilled.jrxml");
            System.out.println(idSydisplay.get(SchoolYCombobox1.getSelectedIndex()) + "Printed School Year");

            String SQL = "SELECT * FROM dcaa_databse.category_department";
            String Location = System.getProperty("user.dir") + "\\\\reports\\\\";
            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);

            HashMap m = new HashMap<>();

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;

            ps = c.prepareStatement("SELECT sum(Amount) from billing where School_Year_idSchool_Year ='" + idSydisplay.get(SchoolYCombobox1.getSelectedIndex()) + "'");
            rs = ps.executeQuery();
            if (rs.next()) {
                m.put("Total", df1.format(rs.getDouble(1)));
            }
            m.put("SY", idSydisplay.get(SchoolYCombobox1.getSelectedIndex()));
            m.put("SY_Display", Sydisplay.get(SchoolYCombobox1.getSelectedIndex()));
            m.put("SUBREPORT_DIR", Location);
            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());

            JasperViewer.viewReport(JP, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

    }

    void Load_departments() {
        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;

            ps = c.prepareStatement("Select idCategory_Department,Department_Name from category_department");
            rs = ps.executeQuery();

            while (rs.next()) {
                IdDepartment.add(rs.getString(1));
                Display_Department.add(rs.getString(1) + "-" + rs.getString(2));

            }
            combomodel = new DefaultComboBoxModel(Display_Department.toArray());
            DepartmentCombobox.setModel(combomodel);

        } catch (Exception ex) {
            Logger.getLogger(Accounting.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void load_SY() {

        try {

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;
            ps = c.prepareStatement("Select idschool_year,School_Year,Semester from school_year order by idschool_year desc");
            rs = ps.executeQuery();
            while (rs.next()) {
                Sydisplay.add(rs.getString(2) + "-" + rs.getString(3));
                idSydisplay.add(rs.getString(1));
            }
            rs.close();
            SYBoxModel = new DefaultComboBoxModel(Sydisplay.toArray());
            SchoolYCombobox1.setModel(SYBoxModel);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    void LoadCategory_Invoice(String From, String To) throws IOException {
        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;

            ps = c.prepareStatement("Select Category_of_charges_idCategory_of_charges from invoice DATE Between '" + From + "' AND '" + To + "'");

        } catch (SQLException ex) {
            Logger.getLogger(Accounting.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void load_Departments_Category() {
        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;
            model1.setRowCount(0);
            ps = c.prepareStatement("Select idCategory_of_charges,Charge_Name from category_of_charges  where Category_Department='" + IdDepartment.get(DepartmentCombobox.getSelectedIndex()) + "'");
            rs = ps.executeQuery();
            while (rs.next()) {
                model1.addRow(new Object[]{rs.getString(1), rs.getString(2)});
            }

        } catch (SQLException ex) {
            Logger.getLogger(Accounting.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void load_Invoice() {

        try {
            model2.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps, ps1;
            ResultSet rs = null, rs2 = null;
            String timeStamp = new SimpleDateFormat("yyyy-MM-dd%").format(Calendar.getInstance().getTime());
            System.out.println(timeStamp);
            ps = c.prepareStatement("Select date,Category_of_charges_idCategory_of_charges,Particulars,Student_Info_idStudent_Info,OrNum,Value from Invoice where DATE like '" + timeStamp + "'");

            rs = ps.executeQuery();
            while (rs.next()) {

                String GradeLevel = "";
                ps1 = c.prepareStatement("SELECT GradeLevel  FROM student_info where id='" + rs.getString("Student_Info_idStudent_Info") + "'");
                rs2 = ps1.executeQuery();
                if (rs2.next()) {
                    GradeLevel = rs2.getString(1);
                }

                model2.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), GradeLevel});

            }

            ps = c.prepareStatement("Select SUM(Value) from Invoice where DATE like '" + timeStamp + "'");
            rs = ps.executeQuery();
            if (rs.next()) {
                jLabel6.setText(df1.format(rs.getDouble(1)));
                System.out.println(rs.getString(1));
            }

        } catch (SQLException ex) {
            Logger.getLogger(Accounting.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void Search_Data() {

        try {
            model2.setRowCount(0);
            String S = "%" + SearchKey.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;
            // String timeStamp = new SimpleDateFormat("yyyy-MM-dd%").format(Calendar.getInstance().getTime());
            //System.out.println(timeStamp);
            if (SearchCrteria.getSelectedIndex() == 0) {
                ps = c.prepareStatement("Select date,Category_of_charges_idCategory_of_charges,Particulars,Student_Info_idStudent_Info,OrNum,Value from Invoice where Particulars like '" + S + "'");
            } else if (SearchCrteria.getSelectedIndex() == 1) {
                ps = c.prepareStatement("Select date,Category_of_charges_idCategory_of_charges,Particulars,Student_Info_idStudent_Info,OrNum,Value from Invoice where Student_Info_idStudent_Info like '" + S + "'");
            } else if (SearchCrteria.getSelectedIndex() == 2) {
                ps = c.prepareStatement("Select date,Category_of_charges_idCategory_of_charges,Particulars,Student_Info_idStudent_Info,OrNum,Value from Invoice where OrNum  like '" + S + "'");
            } else {

                ps = c.prepareStatement("Select date,Category_of_charges_idCategory_of_charges,Particulars,Student_Info_idStudent_Info,OrNum,Value from Invoice where OrNum like '" + S + "'");
            }
            rs = ps.executeQuery();

            while (rs.next()) {
                model2.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)});

            }

            // ps = c.prepareStatement("Select SUM(Value) from Invoice where DATE like '" + timeStamp + "'");
        } catch (SQLException ex) {
            Logger.getLogger(Accounting.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void Search_Invoice_OR(String SearchOR) {

        try {
            model2.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs = null;

            ps = c.prepareStatement("Select date,Category_of_charges_idCategory_of_charges,Particulars,Student_Info_idStudent_Info,OrNum,Value from Invoice where OrNum like '" + SearchOR + "'");

            rs = ps.executeQuery();
            while (rs.next()) {
                model2.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)});

            }
            ps = c.prepareStatement("Select SUM(Value) from Invoice where OrNum  like '" + SearchOR + "'");
            rs = ps.executeQuery();
            if (rs.next()) {
                jLabel6.setText(df1.format(rs.getDouble(1)));
                System.out.println(rs.getString(1));
            }

        } catch (SQLException ex) {
            Logger.getLogger(Accounting.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void load_InvoiceDate(String From, String To) {

        try {
            model2.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps, ps1;
            ResultSet rs = null, rs2 = null;

            ps = c.prepareStatement("Select Date,Category_of_charges_idCategory_of_charges,Particulars,Student_Info_idStudent_Info,OrNum,Value from Invoice where DATE Between '" + From + "' AND '" + To + "' AND School_Year_idSchool_Year='" + idSydisplay.get(SchoolYCombobox1.getSelectedIndex()) + "'");

            rs = ps.executeQuery();
            while (rs.next()) {
                String GradeLevel = "";
                ps1 = c.prepareStatement("SELECT GradeLevel  FROM student_info where id='" + rs.getString("Student_Info_idStudent_Info") + "'");
                rs2 = ps1.executeQuery();
                if (rs2.next()) {
                    GradeLevel = rs2.getString(1);
                }

                model2.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), GradeLevel});

            }
            ps.close();
            rs.close();

            ps = c.prepareStatement("Select SUM(Value) from Invoice where DATE Between '" + From + "' AND '" + To + "' AND School_Year_idSchool_Year='" + idSydisplay.get(SchoolYCombobox1.getSelectedIndex()) + "'");
            rs = ps.executeQuery();
            System.out.println(idSydisplay.get(SchoolYCombobox1.getSelectedIndex()) + "School Year");

            if (rs.next()) {
                jLabel6.setText(df1.format(rs.getDouble(1)));
            }

        } catch (SQLException ex) {
            Logger.getLogger(Accounting.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void load_InvoiceDate_Category(String From, String To) {

        try {
            model2.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps, ps1;
            ResultSet rs = null, rs1;
            Category_invoiceValue = 0;
            ps = c.prepareStatement("Select Date,Category_of_charges_idCategory_of_charges,Particulars,Student_Info_idStudent_Info,OrNum,Value from Invoice where DATE Between '" + From + "' AND '" + To + "' AND School_Year_idSchool_Year='" + idSydisplay.get(SchoolYCombobox1.getSelectedIndex()) + "'");

            rs = ps.executeQuery();
            while (rs.next()) {
                ps1 = c.prepareStatement("SELECT idFee_Charges,Category_of_charges FROM dcaa_databse.fee_charges");
                rs1 = ps1.executeQuery();

                while (rs1.next()) {
                    if (rs.getString(2).equals(rs1.getString(1))) {
                        if (rs1.getString(2).equals(categoryid)) {
                            model2.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6)});
                            Category_invoiceValue = Category_invoiceValue + rs.getDouble(6);
                        }
                    }
                }

            }

            Category_invoice.setText(String.valueOf(df1.format(Category_invoiceValue)));

        } catch (SQLException ex) {
            Logger.getLogger(Accounting.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Category_invoice;
    private javax.swing.JLabel Category_selected1;
    private javax.swing.JComboBox<String> DepartmentCombobox;
    private javax.swing.JComboBox<String> SchoolYCombobox1;
    private javax.swing.JComboBox<String> SearchCrteria;
    private javax.swing.JTextField SearchKey;
    private javax.swing.JButton StudentJournal;
    private com.toedter.calendar.JDateChooser To_date;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private com.toedter.calendar.JCalendar jCalendar1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
